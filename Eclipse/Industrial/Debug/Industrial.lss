
Industrial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003152  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00003152  000031e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800182  00800182  00003308  2**0
                  ALLOC
  3 .stab         00003960  00000000  00000000  00003308  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018d4  00000000  00000000  00006c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000853c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000867c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000087ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a435  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c0d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c5 11 	jmp	0x238a	; 0x238a <__vector_10>
      2c:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5e 12 	call	0x24bc	; 0x24bc <main>
      8a:	0c 94 a7 18 	jmp	0x314e	; 0x314e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0f 18 	jmp	0x301e	; 0x301e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 18 	jmp	0x3026	; 0x3026 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/

void UART_init(unsigned long baud)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_init+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	6b 83       	std	Y+3, r22	; 0x03
     b56:	7c 83       	std	Y+4, r23	; 0x04
     b58:	8d 83       	std	Y+5, r24	; 0x05
     b5a:	9e 83       	std	Y+6, r25	; 0x06
	/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	unsigned short UBRR ;
	UBRR=(F_CPU/(16*baud))-1 ;
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	9c 81       	ldd	r25, Y+4	; 0x04
     b60:	ad 81       	ldd	r26, Y+5	; 0x05
     b62:	be 81       	ldd	r27, Y+6	; 0x06
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	aa 1f       	adc	r26, r26
     b6a:	bb 1f       	adc	r27, r27
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	aa 1f       	adc	r26, r26
     b72:	bb 1f       	adc	r27, r27
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	aa 1f       	adc	r26, r26
     b7a:	bb 1f       	adc	r27, r27
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	aa 1f       	adc	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	9c 01       	movw	r18, r24
     b86:	ad 01       	movw	r20, r26
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	92 e1       	ldi	r25, 0x12	; 18
     b8c:	aa e7       	ldi	r26, 0x7A	; 122
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	bc 01       	movw	r22, r24
     b92:	cd 01       	movw	r24, r26
     b94:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__udivmodsi4>
     b98:	da 01       	movw	r26, r20
     b9a:	c9 01       	movw	r24, r18
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	9a 83       	std	Y+2, r25	; 0x02
     ba0:	89 83       	std	Y+1, r24	; 0x01
	UBRRH=(unsigned char)(UBRR>>8);
     ba2:	e0 e4       	ldi	r30, 0x40	; 64
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	9a 81       	ldd	r25, Y+2	; 0x02
     baa:	89 2f       	mov	r24, r25
     bac:	99 27       	eor	r25, r25
     bae:	80 83       	st	Z, r24
	UBRRL=(unsigned char)UBRR;
     bb0:	e9 e2       	ldi	r30, 0x29	; 41
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	80 83       	st	Z, r24
	/*2 - Enable USART Sender & Receiver*/
	SET_BIT(UCSRB,TXEN);
     bb8:	aa e2       	ldi	r26, 0x2A	; 42
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	ea e2       	ldi	r30, 0x2A	; 42
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	88 60       	ori	r24, 0x08	; 8
     bc4:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     bc6:	aa e2       	ldi	r26, 0x2A	; 42
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	ea e2       	ldi	r30, 0x2A	; 42
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	80 61       	ori	r24, 0x10	; 16
     bd2:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXCIE);
     bd4:	aa e2       	ldi	r26, 0x2A	; 42
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	ea e2       	ldi	r30, 0x2A	; 42
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	80 68       	ori	r24, 0x80	; 128
     be0:	8c 93       	st	X, r24
	/*3 - Choose number of data bits to be sent,parity and stop bits from UCSRC
	, We will work with 8 bits data,1 stop bit and no parity bits*/
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
     be2:	e0 e4       	ldi	r30, 0x40	; 64
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	86 e8       	ldi	r24, 0x86	; 134
     be8:	80 83       	st	Z, r24
}
     bea:	26 96       	adiw	r28, 0x06	; 6
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	0f 92       	push	r0
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c08:	eb e2       	ldi	r30, 0x2B	; 43
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	80 72       	andi	r24, 0x20	; 32
     c14:	90 70       	andi	r25, 0x00	; 0
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	b9 f3       	breq	.-18     	; 0xc08 <UART_sendByte+0xc>

	UDR = data;
     c1a:	ec e2       	ldi	r30, 0x2C	; 44
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	80 83       	st	Z, r24
}
     c22:	0f 90       	pop	r0
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <UART_receiveByte>:

uint8 UART_receiveByte()
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c32:	eb e2       	ldi	r30, 0x2B	; 43
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	88 23       	and	r24, r24
     c3a:	dc f7       	brge	.-10     	; 0xc32 <UART_receiveByte+0x8>

	return UDR;
     c3c:	ec e2       	ldi	r30, 0x2C	; 44
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
}
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <UART_sendString+0x6>
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	9b 83       	std	Y+3, r25	; 0x03
     c56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i ;
	for(i = 0 ; Str[i] != '\0' ; i++)
     c58:	19 82       	std	Y+1, r1	; 0x01
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	9b 81       	ldd	r25, Y+3	; 0x03
     c66:	fc 01       	movw	r30, r24
     c68:	e2 0f       	add	r30, r18
     c6a:	f3 1f       	adc	r31, r19
     c6c:	80 81       	ld	r24, Z
     c6e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_sendByte>
}

void UART_sendString(const uint8 *Str)
{
	uint8 i ;
	for(i = 0 ; Str[i] != '\0' ; i++)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	8f 5f       	subi	r24, 0xFF	; 255
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	fc 01       	movw	r30, r24
     c84:	e2 0f       	add	r30, r18
     c86:	f3 1f       	adc	r31, r19
     c88:	80 81       	ld	r24, Z
     c8a:	88 23       	and	r24, r24
     c8c:	39 f7       	brne	.-50     	; 0xc5c <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
	}
}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <UART_receiveString+0xa>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cae:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	9b 81       	ldd	r25, Y+3	; 0x03
     cba:	8c 01       	movw	r16, r24
     cbc:	02 0f       	add	r16, r18
     cbe:	13 1f       	adc	r17, r19
     cc0:	0e 94 15 06 	call	0xc2a	; 0xc2a <UART_receiveByte>
     cc4:	f8 01       	movw	r30, r16
     cc6:	80 83       	st	Z, r24
     cc8:	0f c0       	rjmp	.+30     	; 0xce8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != g_endStringChar)
	{
		i++;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	8f 5f       	subi	r24, 0xFF	; 255
     cce:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	9b 81       	ldd	r25, Y+3	; 0x03
     cda:	8c 01       	movw	r16, r24
     cdc:	02 0f       	add	r16, r18
     cde:	13 1f       	adc	r17, r19
     ce0:	0e 94 15 06 	call	0xc2a	; 0xc2a <UART_receiveByte>
     ce4:	f8 01       	movw	r30, r16
     ce6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != g_endStringChar)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	9b 81       	ldd	r25, Y+3	; 0x03
     cf2:	fc 01       	movw	r30, r24
     cf4:	e2 0f       	add	r30, r18
     cf6:	f3 1f       	adc	r31, r19
     cf8:	90 81       	ld	r25, Z
     cfa:	80 91 84 01 	lds	r24, 0x0184
     cfe:	98 17       	cp	r25, r24
     d00:	21 f7       	brne	.-56     	; 0xcca <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	9b 81       	ldd	r25, Y+3	; 0x03
     d0c:	fc 01       	movw	r30, r24
     d0e:	e2 0f       	add	r30, r18
     d10:	f3 1f       	adc	r31, r19
     d12:	10 82       	st	Z, r1

}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	08 95       	ret

00000d24 <UART_setCallBack>:

void UART_setCallBack( void(*a_ptr)(void) )
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	00 d0       	rcall	.+0      	; 0xd2a <UART_setCallBack+0x6>
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	90 93 83 01 	sts	0x0183, r25
     d3a:	80 93 82 01 	sts	0x0182, r24
}
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <__vector_11>:
//		(*g_callBackPtr1)();
//	}
//}

ISR(TIMER0_OVF_vect)
{
     d48:	1f 92       	push	r1
     d4a:	0f 92       	push	r0
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	0f 92       	push	r0
     d50:	11 24       	eor	r1, r1
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
     d72:	80 91 87 01 	lds	r24, 0x0187
     d76:	90 91 88 01 	lds	r25, 0x0188
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	29 f0       	breq	.+10     	; 0xd88 <__vector_11+0x40>
	{
		(*g_callBackPtr2)();
     d7e:	e0 91 87 01 	lds	r30, 0x0187
     d82:	f0 91 88 01 	lds	r31, 0x0188
     d86:	09 95       	icall
	}
}
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <TIMER0_init>:

void TIMER0_init(Timer0_ConfigType * Config_Ptr)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <TIMER0_init+0x6>
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (1<<FOC0) | (Config_Ptr->mode << WGM01);
     dbc:	a3 e5       	ldi	r26, 0x53	; 83
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e9 81       	ldd	r30, Y+1	; 0x01
     dc2:	fa 81       	ldd	r31, Y+2	; 0x02
     dc4:	85 81       	ldd	r24, Z+5	; 0x05
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	80 68       	ori	r24, 0x80	; 128
     dd8:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
     dda:	a3 e5       	ldi	r26, 0x53	; 83
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e3 e5       	ldi	r30, 0x53	; 83
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	98 2f       	mov	r25, r24
     de6:	98 7f       	andi	r25, 0xF8	; 248
     de8:	e9 81       	ldd	r30, Y+1	; 0x01
     dea:	fa 81       	ldd	r31, Y+2	; 0x02
     dec:	84 81       	ldd	r24, Z+4	; 0x04
     dee:	89 2b       	or	r24, r25
     df0:	8c 93       	st	X, r24

	TCNT0 = Config_Ptr->initial_value;
     df2:	a2 e5       	ldi	r26, 0x52	; 82
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e9 81       	ldd	r30, Y+1	; 0x01
     df8:	fa 81       	ldd	r31, Y+2	; 0x02
     dfa:	80 81       	ld	r24, Z
     dfc:	91 81       	ldd	r25, Z+1	; 0x01
     dfe:	8c 93       	st	X, r24
	if(Config_Ptr->mode == COMPARE0)
     e00:	e9 81       	ldd	r30, Y+1	; 0x01
     e02:	fa 81       	ldd	r31, Y+2	; 0x02
     e04:	85 81       	ldd	r24, Z+5	; 0x05
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	79 f4       	brne	.+30     	; 0xe28 <TIMER0_init+0x7a>
	{
		OCR0 = Config_Ptr->compare_value;
     e0a:	ac e5       	ldi	r26, 0x5C	; 92
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e9 81       	ldd	r30, Y+1	; 0x01
     e10:	fa 81       	ldd	r31, Y+2	; 0x02
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0) ;
     e18:	a9 e5       	ldi	r26, 0x59	; 89
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e9 e5       	ldi	r30, 0x59	; 89
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	82 60       	ori	r24, 0x02	; 2
     e24:	8c 93       	st	X, r24
     e26:	07 c0       	rjmp	.+14     	; 0xe36 <TIMER0_init+0x88>
	}
	else
	{
		TIMSK |= (1<<TOIE0) ;
     e28:	a9 e5       	ldi	r26, 0x59	; 89
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e9 e5       	ldi	r30, 0x59	; 89
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	81 60       	ori	r24, 0x01	; 1
     e34:	8c 93       	st	X, r24
	}
}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <TIMER0_deInit>:

void TIMER0_deInit()
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	10 82       	st	Z, r1
	TCNT0 = 0;
     e4e:	e2 e5       	ldi	r30, 0x52	; 82
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	10 82       	st	Z, r1
	OCR0 = 0;
     e54:	ec e5       	ldi	r30, 0x5C	; 92
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <TIMER0_COMP_setCallBack>:

void TIMER0_COMP_setCallBack( void(*a_ptr)(void) )
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <TIMER0_COMP_setCallBack+0x6>
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	90 93 86 01 	sts	0x0186, r25
     e76:	80 93 85 01 	sts	0x0185, r24
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <TIMER0_OVF_setCallBack>:

void TIMER0_OVF_setCallBack( void(*a_ptr)(void) )
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <TIMER0_OVF_setCallBack+0x6>
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	90 93 88 01 	sts	0x0188, r25
     e9a:	80 93 87 01 	sts	0x0187, r24
}
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <GPIO_setupPinDirection+0x6>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <GPIO_setupPinDirection+0x8>
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	6a 83       	std	Y+2, r22	; 0x02
     eba:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	88 30       	cpi	r24, 0x08	; 8
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <GPIO_setupPinDirection+0x1c>
     ec2:	d5 c0       	rjmp	.+426    	; 0x106e <GPIO_setupPinDirection+0x1c6>
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	08 f0       	brcs	.+2      	; 0xecc <GPIO_setupPinDirection+0x24>
     eca:	d1 c0       	rjmp	.+418    	; 0x106e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	3d 83       	std	Y+5, r19	; 0x05
     ed4:	2c 83       	std	Y+4, r18	; 0x04
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	9d 81       	ldd	r25, Y+5	; 0x05
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	91 05       	cpc	r25, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <GPIO_setupPinDirection+0x3a>
     ee0:	43 c0       	rjmp	.+134    	; 0xf68 <GPIO_setupPinDirection+0xc0>
     ee2:	2c 81       	ldd	r18, Y+4	; 0x04
     ee4:	3d 81       	ldd	r19, Y+5	; 0x05
     ee6:	22 30       	cpi	r18, 0x02	; 2
     ee8:	31 05       	cpc	r19, r1
     eea:	2c f4       	brge	.+10     	; 0xef6 <GPIO_setupPinDirection+0x4e>
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	9d 81       	ldd	r25, Y+5	; 0x05
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	71 f0       	breq	.+28     	; 0xf10 <GPIO_setupPinDirection+0x68>
     ef4:	bc c0       	rjmp	.+376    	; 0x106e <GPIO_setupPinDirection+0x1c6>
     ef6:	2c 81       	ldd	r18, Y+4	; 0x04
     ef8:	3d 81       	ldd	r19, Y+5	; 0x05
     efa:	22 30       	cpi	r18, 0x02	; 2
     efc:	31 05       	cpc	r19, r1
     efe:	09 f4       	brne	.+2      	; 0xf02 <GPIO_setupPinDirection+0x5a>
     f00:	5f c0       	rjmp	.+190    	; 0xfc0 <GPIO_setupPinDirection+0x118>
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <GPIO_setupPinDirection+0x66>
     f0c:	85 c0       	rjmp	.+266    	; 0x1018 <GPIO_setupPinDirection+0x170>
     f0e:	af c0       	rjmp	.+350    	; 0x106e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	a1 f4       	brne	.+40     	; 0xf3e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <GPIO_setupPinDirection+0x8c>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <GPIO_setupPinDirection+0x88>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	98 c0       	rjmp	.+304    	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f3e:	aa e3       	ldi	r26, 0x3A	; 58
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	ea e3       	ldi	r30, 0x3A	; 58
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <GPIO_setupPinDirection+0xb4>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <GPIO_setupPinDirection+0xb0>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	83 c0       	rjmp	.+262    	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	a1 f4       	brne	.+40     	; 0xf96 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f6e:	a7 e3       	ldi	r26, 0x37	; 55
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e7 e3       	ldi	r30, 0x37	; 55
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_setupPinDirection+0xe4>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_setupPinDirection+0xe0>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	6c c0       	rjmp	.+216    	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f96:	a7 e3       	ldi	r26, 0x37	; 55
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e7 e3       	ldi	r30, 0x37	; 55
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <GPIO_setupPinDirection+0x10c>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <GPIO_setupPinDirection+0x108>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	57 c0       	rjmp	.+174    	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	a1 f4       	brne	.+40     	; 0xfee <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fc6:	a4 e3       	ldi	r26, 0x34	; 52
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e4 e3       	ldi	r30, 0x34	; 52
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_setupPinDirection+0x13c>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_setupPinDirection+0x138>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	40 c0       	rjmp	.+128    	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fee:	a4 e3       	ldi	r26, 0x34	; 52
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e4 e3       	ldi	r30, 0x34	; 52
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <GPIO_setupPinDirection+0x164>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <GPIO_setupPinDirection+0x160>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	2b c0       	rjmp	.+86     	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	a1 f4       	brne	.+40     	; 0x1046 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    101e:	a1 e3       	ldi	r26, 0x31	; 49
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e1 e3       	ldi	r30, 0x31	; 49
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_setupPinDirection+0x194>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_setupPinDirection+0x190>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	14 c0       	rjmp	.+40     	; 0x106e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1046:	a1 e3       	ldi	r26, 0x31	; 49
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e1 e3       	ldi	r30, 0x31	; 49
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <GPIO_setupPinDirection+0x1bc>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <GPIO_setupPinDirection+0x1b8>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <GPIO_writePin+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <GPIO_writePin+0x8>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	6a 83       	std	Y+2, r22	; 0x02
    1090:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	88 30       	cpi	r24, 0x08	; 8
    1096:	08 f0       	brcs	.+2      	; 0x109a <GPIO_writePin+0x1c>
    1098:	d5 c0       	rjmp	.+426    	; 0x1244 <GPIO_writePin+0x1c6>
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	84 30       	cpi	r24, 0x04	; 4
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <GPIO_writePin+0x24>
    10a0:	d1 c0       	rjmp	.+418    	; 0x1244 <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch(port_num)
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	3d 83       	std	Y+5, r19	; 0x05
    10aa:	2c 83       	std	Y+4, r18	; 0x04
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	9d 81       	ldd	r25, Y+5	; 0x05
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <GPIO_writePin+0x3a>
    10b6:	43 c0       	rjmp	.+134    	; 0x113e <GPIO_writePin+0xc0>
    10b8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ba:	3d 81       	ldd	r19, Y+5	; 0x05
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	2c f4       	brge	.+10     	; 0x10cc <GPIO_writePin+0x4e>
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	9d 81       	ldd	r25, Y+5	; 0x05
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <GPIO_writePin+0x68>
    10ca:	bc c0       	rjmp	.+376    	; 0x1244 <GPIO_writePin+0x1c6>
    10cc:	2c 81       	ldd	r18, Y+4	; 0x04
    10ce:	3d 81       	ldd	r19, Y+5	; 0x05
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <GPIO_writePin+0x5a>
    10d6:	5f c0       	rjmp	.+190    	; 0x1196 <GPIO_writePin+0x118>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <GPIO_writePin+0x66>
    10e2:	85 c0       	rjmp	.+266    	; 0x11ee <GPIO_writePin+0x170>
    10e4:	af c0       	rjmp	.+350    	; 0x1244 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	a1 f4       	brne	.+40     	; 0x1114 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10ec:	ab e3       	ldi	r26, 0x3B	; 59
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	eb e3       	ldi	r30, 0x3B	; 59
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <GPIO_writePin+0x8c>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <GPIO_writePin+0x88>
    110e:	84 2b       	or	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	98 c0       	rjmp	.+304    	; 0x1244 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1114:	ab e3       	ldi	r26, 0x3B	; 59
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	eb e3       	ldi	r30, 0x3B	; 59
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <GPIO_writePin+0xb4>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <GPIO_writePin+0xb0>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	83 c0       	rjmp	.+262    	; 0x1244 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	a1 f4       	brne	.+40     	; 0x116c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1144:	a8 e3       	ldi	r26, 0x38	; 56
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 e3       	ldi	r30, 0x38	; 56
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <GPIO_writePin+0xe4>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <GPIO_writePin+0xe0>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	6c c0       	rjmp	.+216    	; 0x1244 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    116c:	a8 e3       	ldi	r26, 0x38	; 56
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e8 e3       	ldi	r30, 0x38	; 56
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <GPIO_writePin+0x10c>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <GPIO_writePin+0x108>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	57 c0       	rjmp	.+174    	; 0x1244 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	a1 f4       	brne	.+40     	; 0x11c4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    119c:	a5 e3       	ldi	r26, 0x35	; 53
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_writePin+0x13c>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_writePin+0x138>
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	40 c0       	rjmp	.+128    	; 0x1244 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11c4:	a5 e3       	ldi	r26, 0x35	; 53
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e3       	ldi	r30, 0x35	; 53
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <GPIO_writePin+0x164>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <GPIO_writePin+0x160>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	2b c0       	rjmp	.+86     	; 0x1244 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	a1 f4       	brne	.+40     	; 0x121c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11f4:	a2 e3       	ldi	r26, 0x32	; 50
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e2 e3       	ldi	r30, 0x32	; 50
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_writePin+0x194>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_writePin+0x190>
    1216:	84 2b       	or	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    121c:	a2 e3       	ldi	r26, 0x32	; 50
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e2 e3       	ldi	r30, 0x32	; 50
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <GPIO_writePin+0x1bc>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <GPIO_writePin+0x1b8>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <GPIO_readPin+0x6>
    125a:	00 d0       	rcall	.+0      	; 0x125c <GPIO_readPin+0x8>
    125c:	0f 92       	push	r0
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	8a 83       	std	Y+2, r24	; 0x02
    1264:	6b 83       	std	Y+3, r22	; 0x03
	uint8 GPIO_outPin = LOGIC_LOW; /* the default return value */
    1266:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	08 f0       	brcs	.+2      	; 0x1270 <GPIO_readPin+0x1c>
    126e:	84 c0       	rjmp	.+264    	; 0x1378 <GPIO_readPin+0x124>
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	84 30       	cpi	r24, 0x04	; 4
    1274:	08 f0       	brcs	.+2      	; 0x1278 <GPIO_readPin+0x24>
    1276:	80 c0       	rjmp	.+256    	; 0x1378 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3d 83       	std	Y+5, r19	; 0x05
    1280:	2c 83       	std	Y+4, r18	; 0x04
    1282:	4c 81       	ldd	r20, Y+4	; 0x04
    1284:	5d 81       	ldd	r21, Y+5	; 0x05
    1286:	41 30       	cpi	r20, 0x01	; 1
    1288:	51 05       	cpc	r21, r1
    128a:	79 f1       	breq	.+94     	; 0x12ea <GPIO_readPin+0x96>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	91 05       	cpc	r25, r1
    1294:	34 f4       	brge	.+12     	; 0x12a2 <GPIO_readPin+0x4e>
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	3d 81       	ldd	r19, Y+5	; 0x05
    129a:	21 15       	cp	r18, r1
    129c:	31 05       	cpc	r19, r1
    129e:	69 f0       	breq	.+26     	; 0x12ba <GPIO_readPin+0x66>
    12a0:	6b c0       	rjmp	.+214    	; 0x1378 <GPIO_readPin+0x124>
    12a2:	4c 81       	ldd	r20, Y+4	; 0x04
    12a4:	5d 81       	ldd	r21, Y+5	; 0x05
    12a6:	42 30       	cpi	r20, 0x02	; 2
    12a8:	51 05       	cpc	r21, r1
    12aa:	b9 f1       	breq	.+110    	; 0x131a <GPIO_readPin+0xc6>
    12ac:	8c 81       	ldd	r24, Y+4	; 0x04
    12ae:	9d 81       	ldd	r25, Y+5	; 0x05
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	91 05       	cpc	r25, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <GPIO_readPin+0x64>
    12b6:	49 c0       	rjmp	.+146    	; 0x134a <GPIO_readPin+0xf6>
    12b8:	5f c0       	rjmp	.+190    	; 0x1378 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA,pin_num) )
    12ba:	e9 e3       	ldi	r30, 0x39	; 57
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a9 01       	movw	r20, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <GPIO_readPin+0x7e>
    12ce:	55 95       	asr	r21
    12d0:	47 95       	ror	r20
    12d2:	8a 95       	dec	r24
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <GPIO_readPin+0x7a>
    12d6:	ca 01       	movw	r24, r20
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	88 23       	and	r24, r24
    12de:	19 f0       	breq	.+6      	; 0x12e6 <GPIO_readPin+0x92>
			{
				GPIO_outPin = LOGIC_HIGH;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	49 c0       	rjmp	.+146    	; 0x1378 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    12e6:	19 82       	std	Y+1, r1	; 0x01
    12e8:	47 c0       	rjmp	.+142    	; 0x1378 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if( BIT_IS_SET(PINB,pin_num) )
    12ea:	e6 e3       	ldi	r30, 0x36	; 54
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <GPIO_readPin+0xae>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <GPIO_readPin+0xaa>
    1306:	ca 01       	movw	r24, r20
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	90 70       	andi	r25, 0x00	; 0
    130c:	88 23       	and	r24, r24
    130e:	19 f0       	breq	.+6      	; 0x1316 <GPIO_readPin+0xc2>
			{
				GPIO_outPin = LOGIC_HIGH;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	31 c0       	rjmp	.+98     	; 0x1378 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1316:	19 82       	std	Y+1, r1	; 0x01
    1318:	2f c0       	rjmp	.+94     	; 0x1378 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if( BIT_IS_SET(PINC,pin_num) )
    131a:	e3 e3       	ldi	r30, 0x33	; 51
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a9 01       	movw	r20, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <GPIO_readPin+0xde>
    132e:	55 95       	asr	r21
    1330:	47 95       	ror	r20
    1332:	8a 95       	dec	r24
    1334:	e2 f7       	brpl	.-8      	; 0x132e <GPIO_readPin+0xda>
    1336:	ca 01       	movw	r24, r20
    1338:	81 70       	andi	r24, 0x01	; 1
    133a:	90 70       	andi	r25, 0x00	; 0
    133c:	88 23       	and	r24, r24
    133e:	19 f0       	breq	.+6      	; 0x1346 <GPIO_readPin+0xf2>
			{
				GPIO_outPin = LOGIC_HIGH;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	19 c0       	rjmp	.+50     	; 0x1378 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1346:	19 82       	std	Y+1, r1	; 0x01
    1348:	17 c0       	rjmp	.+46     	; 0x1378 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if( BIT_IS_SET(PIND,pin_num) )
    134a:	e0 e3       	ldi	r30, 0x30	; 48
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <GPIO_readPin+0x10e>
    135e:	55 95       	asr	r21
    1360:	47 95       	ror	r20
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <GPIO_readPin+0x10a>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	88 23       	and	r24, r24
    136e:	19 f0       	breq	.+6      	; 0x1376 <GPIO_readPin+0x122>
			{
				GPIO_outPin = LOGIC_HIGH;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <GPIO_readPin+0x124>
			}
			else
			{
				GPIO_outPin = LOGIC_LOW;
    1376:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return GPIO_outPin;
    1378:	89 81       	ldd	r24, Y+1	; 0x01
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <GPIO_setupPortDirection+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <GPIO_setupPortDirection+0x8>
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	84 30       	cpi	r24, 0x04	; 4
    139e:	90 f5       	brcc	.+100    	; 0x1404 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3c 83       	std	Y+4, r19	; 0x04
    13a8:	2b 83       	std	Y+3, r18	; 0x03
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	d1 f0       	breq	.+52     	; 0x13e8 <GPIO_setupPortDirection+0x5e>
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <GPIO_setupPortDirection+0x3e>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	61 f0       	breq	.+24     	; 0x13de <GPIO_setupPortDirection+0x54>
    13c6:	1e c0       	rjmp	.+60     	; 0x1404 <GPIO_setupPortDirection+0x7a>
    13c8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ca:	3c 81       	ldd	r19, Y+4	; 0x04
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	81 f0       	breq	.+32     	; 0x13f2 <GPIO_setupPortDirection+0x68>
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	91 05       	cpc	r25, r1
    13da:	81 f0       	breq	.+32     	; 0x13fc <GPIO_setupPortDirection+0x72>
    13dc:	13 c0       	rjmp	.+38     	; 0x1404 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13de:	ea e3       	ldi	r30, 0x3A	; 58
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	80 83       	st	Z, r24
    13e6:	0e c0       	rjmp	.+28     	; 0x1404 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13e8:	e7 e3       	ldi	r30, 0x37	; 55
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 83       	st	Z, r24
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13f2:	e4 e3       	ldi	r30, 0x34	; 52
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	80 83       	st	Z, r24
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13fc:	e1 e3       	ldi	r30, 0x31	; 49
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	80 83       	st	Z, r24
			break;
		}
	}
}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <GPIO_writePort+0x6>
    1418:	00 d0       	rcall	.+0      	; 0x141a <GPIO_writePort+0x8>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS) )
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	84 30       	cpi	r24, 0x04	; 4
    1426:	90 f5       	brcc	.+100    	; 0x148c <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3c 83       	std	Y+4, r19	; 0x04
    1430:	2b 83       	std	Y+3, r18	; 0x03
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 05       	cpc	r25, r1
    143a:	d1 f0       	breq	.+52     	; 0x1470 <GPIO_writePort+0x5e>
    143c:	2b 81       	ldd	r18, Y+3	; 0x03
    143e:	3c 81       	ldd	r19, Y+4	; 0x04
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	2c f4       	brge	.+10     	; 0x1450 <GPIO_writePort+0x3e>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	61 f0       	breq	.+24     	; 0x1466 <GPIO_writePort+0x54>
    144e:	1e c0       	rjmp	.+60     	; 0x148c <GPIO_writePort+0x7a>
    1450:	2b 81       	ldd	r18, Y+3	; 0x03
    1452:	3c 81       	ldd	r19, Y+4	; 0x04
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	81 f0       	breq	.+32     	; 0x147a <GPIO_writePort+0x68>
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	81 f0       	breq	.+32     	; 0x1484 <GPIO_writePort+0x72>
    1464:	13 c0       	rjmp	.+38     	; 0x148c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value ;
    1466:	eb e3       	ldi	r30, 0x3B	; 59
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	80 83       	st	Z, r24
    146e:	0e c0       	rjmp	.+28     	; 0x148c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value ;
    1470:	e8 e3       	ldi	r30, 0x38	; 56
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
    1478:	09 c0       	rjmp	.+18     	; 0x148c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value ;
    147a:	e5 e3       	ldi	r30, 0x35	; 53
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	80 83       	st	Z, r24
    1482:	04 c0       	rjmp	.+8      	; 0x148c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value ;
    1484:	e2 e3       	ldi	r30, 0x32	; 50
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	80 83       	st	Z, r24
			break;
		}
	}
}
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <GPIO_readPort+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <GPIO_readPort+0x8>
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 GPIO_outPort = 0x00 ; /* the default return value */
    14a8:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	84 30       	cpi	r24, 0x04	; 4
    14ae:	90 f5       	brcc	.+100    	; 0x1514 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3c 83       	std	Y+4, r19	; 0x04
    14b8:	2b 83       	std	Y+3, r18	; 0x03
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	d1 f0       	breq	.+52     	; 0x14f8 <GPIO_readPort+0x5e>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <GPIO_readPort+0x3e>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	61 f0       	breq	.+24     	; 0x14ee <GPIO_readPort+0x54>
    14d6:	1e c0       	rjmp	.+60     	; 0x1514 <GPIO_readPort+0x7a>
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	3c 81       	ldd	r19, Y+4	; 0x04
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	81 f0       	breq	.+32     	; 0x1502 <GPIO_readPort+0x68>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	81 f0       	breq	.+32     	; 0x150c <GPIO_readPort+0x72>
    14ec:	13 c0       	rjmp	.+38     	; 0x1514 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			GPIO_outPort = PINA;
    14ee:	e9 e3       	ldi	r30, 0x39	; 57
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	0e c0       	rjmp	.+28     	; 0x1514 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			GPIO_outPort = PINB;
    14f8:	e6 e3       	ldi	r30, 0x36	; 54
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			GPIO_outPort = PINC;
    1502:	e3 e3       	ldi	r30, 0x33	; 51
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			GPIO_outPort = PIND;
    150c:	e0 e3       	ldi	r30, 0x30	; 48
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return GPIO_outPort;
    1514:	89 81       	ldd	r24, Y+1	; 0x01
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <GPIO_togglePin>:

void GPIO_togglePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <GPIO_togglePin+0x6>
    152a:	00 d0       	rcall	.+0      	; 0x152c <GPIO_togglePin+0x8>
    152c:	0f 92       	push	r0
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	6a 83       	std	Y+2, r22	; 0x02
    1536:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	88 30       	cpi	r24, 0x08	; 8
    153c:	08 f0       	brcs	.+2      	; 0x1540 <GPIO_togglePin+0x1c>
    153e:	72 c0       	rjmp	.+228    	; 0x1624 <GPIO_togglePin+0x100>
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	08 f0       	brcs	.+2      	; 0x1548 <GPIO_togglePin+0x24>
    1546:	6e c0       	rjmp	.+220    	; 0x1624 <GPIO_togglePin+0x100>
		{
			/* Do Nothing */
		}
	else
	{
		switch(port_num)
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	3d 83       	std	Y+5, r19	; 0x05
    1550:	2c 83       	std	Y+4, r18	; 0x04
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	91 05       	cpc	r25, r1
    155a:	49 f1       	breq	.+82     	; 0x15ae <GPIO_togglePin+0x8a>
    155c:	2c 81       	ldd	r18, Y+4	; 0x04
    155e:	3d 81       	ldd	r19, Y+5	; 0x05
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	31 05       	cpc	r19, r1
    1564:	2c f4       	brge	.+10     	; 0x1570 <GPIO_togglePin+0x4c>
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	61 f0       	breq	.+24     	; 0x1586 <GPIO_togglePin+0x62>
    156e:	5a c0       	rjmp	.+180    	; 0x1624 <GPIO_togglePin+0x100>
    1570:	2c 81       	ldd	r18, Y+4	; 0x04
    1572:	3d 81       	ldd	r19, Y+5	; 0x05
    1574:	22 30       	cpi	r18, 0x02	; 2
    1576:	31 05       	cpc	r19, r1
    1578:	71 f1       	breq	.+92     	; 0x15d6 <GPIO_togglePin+0xb2>
    157a:	8c 81       	ldd	r24, Y+4	; 0x04
    157c:	9d 81       	ldd	r25, Y+5	; 0x05
    157e:	83 30       	cpi	r24, 0x03	; 3
    1580:	91 05       	cpc	r25, r1
    1582:	e9 f1       	breq	.+122    	; 0x15fe <GPIO_togglePin+0xda>
    1584:	4f c0       	rjmp	.+158    	; 0x1624 <GPIO_togglePin+0x100>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA,pin_num);
    1586:	ab e3       	ldi	r26, 0x3B	; 59
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	eb e3       	ldi	r30, 0x3B	; 59
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <GPIO_togglePin+0x80>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <GPIO_togglePin+0x7c>
    15a8:	84 27       	eor	r24, r20
    15aa:	8c 93       	st	X, r24
    15ac:	3b c0       	rjmp	.+118    	; 0x1624 <GPIO_togglePin+0x100>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB,pin_num);
    15ae:	a8 e3       	ldi	r26, 0x38	; 56
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e8 e3       	ldi	r30, 0x38	; 56
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <GPIO_togglePin+0xa8>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <GPIO_togglePin+0xa4>
    15d0:	84 27       	eor	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	27 c0       	rjmp	.+78     	; 0x1624 <GPIO_togglePin+0x100>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC,pin_num);
    15d6:	a5 e3       	ldi	r26, 0x35	; 53
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e5 e3       	ldi	r30, 0x35	; 53
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <GPIO_togglePin+0xd0>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <GPIO_togglePin+0xcc>
    15f8:	84 27       	eor	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <GPIO_togglePin+0x100>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD,pin_num);
    15fe:	a2 e3       	ldi	r26, 0x32	; 50
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e2 e3       	ldi	r30, 0x32	; 50
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_togglePin+0xf8>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_togglePin+0xf4>
    1620:	84 27       	eor	r24, r20
    1622:	8c 93       	st	X, r24
			break;
		}
	}
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <DoorMotor_Init>:
#include "../../MCAL/GPIO/gpio.h"
#include "../../LIB/common_macros.h"


void DoorMotor_Init(void)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	/* setting the direction of the motor pins */
	GPIO_setupPinDirection(DCMOTOR_IN1_PORT_ID, DCMOTOR_PIN_IN1, PIN_OUTPUT); /* Input1 */
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	67 e0       	ldi	r22, 0x07	; 7
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_IN2_PORT_ID, DCMOTOR_PIN_IN2, PIN_OUTPUT); /* Inupt2 */
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>

	/* Stop the motor */
	GPIO_writePin(DCMOTOR_IN1_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	67 e0       	ldi	r22, 0x07	; 7
    1654:	40 e0       	ldi	r20, 0x00	; 0
    1656:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(DCMOTOR_IN2_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(DCMOTOR_E_PORT_ID, DCMOTOR_PIN_E, LOGIC_HIGH);
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	66 e0       	ldi	r22, 0x06	; 6
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <FanMotor_Init>:

void FanMotor_Init(void)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
	/* setting the direction of the motor pins */
	GPIO_setupPinDirection(DCMOTOR2_IN3_PORT_ID, DCMOTOR2_PIN_IN3, PIN_OUTPUT); /* Input1 */
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	62 e0       	ldi	r22, 0x02	; 2
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR2_IN4_PORT_ID, DCMOTOR2_PIN_IN4, PIN_OUTPUT); /* Inupt2 */
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	63 e0       	ldi	r22, 0x03	; 3
    168a:	41 e0       	ldi	r20, 0x01	; 1
    168c:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>

	/* Stop the motor */
	GPIO_writePin(DCMOTOR2_IN3_PORT_ID, DCMOTOR2_PIN_IN3, LOGIC_LOW);
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	62 e0       	ldi	r22, 0x02	; 2
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(DCMOTOR2_IN4_PORT_ID, DCMOTOR2_PIN_IN4, LOGIC_LOW);
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	63 e0       	ldi	r22, 0x03	; 3
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(DCMOTOR2_E_PORT_ID, DCMOTOR_PIN2_E, LOGIC_HIGH);
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	41 e0       	ldi	r20, 0x01	; 1
    16aa:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
}
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <DoorMotor_Rotate>:

void DoorMotor_Rotate(DcMotor_State state)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	0f 92       	push	r0
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	89 83       	std	Y+1, r24	; 0x01
	/* clearing the motor so we can change it state */
	GPIO_writePin(DCMOTOR_IN1_PORT_ID, DCMOTOR_PIN_IN1, LOGIC_LOW);
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	67 e0       	ldi	r22, 0x07	; 7
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(DCMOTOR_IN2_PORT_ID, DCMOTOR_PIN_IN2, LOGIC_LOW);
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>

	GPIO_writePin(DCMOTOR_IN1_PORT_ID, DCMOTOR_PIN_IN1, GET_BIT(state,0));
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	98 2f       	mov	r25, r24
    16d8:	91 70       	andi	r25, 0x01	; 1
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	67 e0       	ldi	r22, 0x07	; 7
    16de:	49 2f       	mov	r20, r25
    16e0:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(DCMOTOR_IN2_PORT_ID, DCMOTOR_PIN_IN2, GET_BIT(state,1));
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	86 95       	lsr	r24
    16e8:	98 2f       	mov	r25, r24
    16ea:	91 70       	andi	r25, 0x01	; 1
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	49 2f       	mov	r20, r25
    16f2:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
}
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <FanMotor_Rotate>:

void FanMotor_Rotate(DcMotor_State state)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	0f 92       	push	r0
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	89 83       	std	Y+1, r24	; 0x01
	/* clearing the motor so we can change it state */
	GPIO_writePin(DCMOTOR2_IN3_PORT_ID, DCMOTOR2_PIN_IN3, LOGIC_LOW);
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(DCMOTOR2_IN4_PORT_ID, DCMOTOR2_PIN_IN4, LOGIC_LOW);
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	63 e0       	ldi	r22, 0x03	; 3
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>

	GPIO_writePin(DCMOTOR2_IN3_PORT_ID, DCMOTOR2_PIN_IN3, GET_BIT(state,0));
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	98 2f       	mov	r25, r24
    1722:	91 70       	andi	r25, 0x01	; 1
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	62 e0       	ldi	r22, 0x02	; 2
    1728:	49 2f       	mov	r20, r25
    172a:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(DCMOTOR2_IN4_PORT_ID, DCMOTOR2_PIN_IN4, GET_BIT(state,1));
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	86 95       	lsr	r24
    1732:	98 2f       	mov	r25, r24
    1734:	91 70       	andi	r25, 0x01	; 1
    1736:	82 e0       	ldi	r24, 0x02	; 2
    1738:	63 e0       	ldi	r22, 0x03	; 3
    173a:	49 2f       	mov	r20, r25
    173c:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
}
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <LED_Init>:

#include "led.h"
#include "../../MCAL/GPIO/gpio.h"

void LED_Init(void)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LEDS_PORT_ID, LEDS_FIRST_PIN_ID, PIN_OUTPUT);
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	65 e0       	ldi	r22, 0x05	; 5
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
}
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <LED_ON>:

void LED_ON(LEDS color)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	89 83       	std	Y+1, r24	; 0x01
	switch(color)
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	29 f4       	brne	.+10     	; 0x1780 <LED_ON+0x20>
	{
	case RED:
		GPIO_writePin(LEDS_PORT_ID, LEDS_FIRST_PIN_ID, LOGIC_HIGH);
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	65 e0       	ldi	r22, 0x05	; 5
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
		break;
	}
}
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <LED_OFF>:

void LED_OFF(LEDS color)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	0f 92       	push	r0
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	89 83       	std	Y+1, r24	; 0x01
	switch(color)
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	29 f4       	brne	.+10     	; 0x17a8 <LED_OFF+0x20>
	{
	case RED:
		GPIO_writePin(LEDS_PORT_ID, LEDS_FIRST_PIN_ID, LOGIC_LOW);
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	65 e0       	ldi	r22, 0x05	; 5
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
		break;
	}
}
    17a8:	0f 90       	pop	r0
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <LED_TOGGLE>:

void LED_TOGGLE(LEDS color)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	0f 92       	push	r0
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	89 83       	std	Y+1, r24	; 0x01
	switch(color)
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	29 f4       	brne	.+10     	; 0x17d0 <LED_TOGGLE+0x20>
	{
	case RED:
		GPIO_togglePin(LEDS_PORT_ID, LEDS_FIRST_PIN_ID, LOGIC_LOW);
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	65 e0       	ldi	r22, 0x05	; 5
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	0e 94 92 0a 	call	0x1524	; 0x1524 <GPIO_togglePin>
		break;
	}
}
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <LCD_init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/GPIO/gpio.h"
#include "util/delay.h"

void LCD_init(void)
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	aa 97       	sbiw	r28, 0x2a	; 42
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	62 e0       	ldi	r22, 0x02	; 2
    17f0:	41 e0       	ldi	r20, 0x01	; 1
    17f2:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	41 e0       	ldi	r20, 0x01	; 1
    1806:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 ea       	ldi	r26, 0xA0	; 160
    181a:	b1 e4       	ldi	r27, 0x41	; 65
    181c:	8f a3       	std	Y+39, r24	; 0x27
    181e:	98 a7       	std	Y+40, r25	; 0x28
    1820:	a9 a7       	std	Y+41, r26	; 0x29
    1822:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	6f a1       	ldd	r22, Y+39	; 0x27
    1826:	78 a5       	ldd	r23, Y+40	; 0x28
    1828:	89 a5       	ldd	r24, Y+41	; 0x29
    182a:	9a a5       	ldd	r25, Y+42	; 0x2a
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4a ef       	ldi	r20, 0xFA	; 250
    1832:	54 e4       	ldi	r21, 0x44	; 68
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8b a3       	std	Y+35, r24	; 0x23
    183e:	9c a3       	std	Y+36, r25	; 0x24
    1840:	ad a3       	std	Y+37, r26	; 0x25
    1842:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1844:	6b a1       	ldd	r22, Y+35	; 0x23
    1846:	7c a1       	ldd	r23, Y+36	; 0x24
    1848:	8d a1       	ldd	r24, Y+37	; 0x25
    184a:	9e a1       	ldd	r25, Y+38	; 0x26
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e8       	ldi	r20, 0x80	; 128
    1852:	5f e3       	ldi	r21, 0x3F	; 63
    1854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1858:	88 23       	and	r24, r24
    185a:	2c f4       	brge	.+10     	; 0x1866 <LCD_init+0x8e>
		__ticks = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9a a3       	std	Y+34, r25	; 0x22
    1862:	89 a3       	std	Y+33, r24	; 0x21
    1864:	3f c0       	rjmp	.+126    	; 0x18e4 <LCD_init+0x10c>
	else if (__tmp > 65535)
    1866:	6b a1       	ldd	r22, Y+35	; 0x23
    1868:	7c a1       	ldd	r23, Y+36	; 0x24
    186a:	8d a1       	ldd	r24, Y+37	; 0x25
    186c:	9e a1       	ldd	r25, Y+38	; 0x26
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	3f ef       	ldi	r19, 0xFF	; 255
    1872:	4f e7       	ldi	r20, 0x7F	; 127
    1874:	57 e4       	ldi	r21, 0x47	; 71
    1876:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187a:	18 16       	cp	r1, r24
    187c:	4c f5       	brge	.+82     	; 0x18d0 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187e:	6f a1       	ldd	r22, Y+39	; 0x27
    1880:	78 a5       	ldd	r23, Y+40	; 0x28
    1882:	89 a5       	ldd	r24, Y+41	; 0x29
    1884:	9a a5       	ldd	r25, Y+42	; 0x2a
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9a a3       	std	Y+34, r25	; 0x22
    18a4:	89 a3       	std	Y+33, r24	; 0x21
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <LCD_init+0xee>
    18a8:	88 ec       	ldi	r24, 0xC8	; 200
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	98 a3       	std	Y+32, r25	; 0x20
    18ae:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18b2:	98 a1       	ldd	r25, Y+32	; 0x20
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <LCD_init+0xdc>
    18b8:	98 a3       	std	Y+32, r25	; 0x20
    18ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18bc:	89 a1       	ldd	r24, Y+33	; 0x21
    18be:	9a a1       	ldd	r25, Y+34	; 0x22
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	9a a3       	std	Y+34, r25	; 0x22
    18c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c6:	89 a1       	ldd	r24, Y+33	; 0x21
    18c8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	69 f7       	brne	.-38     	; 0x18a8 <LCD_init+0xd0>
    18ce:	14 c0       	rjmp	.+40     	; 0x18f8 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d0:	6b a1       	ldd	r22, Y+35	; 0x23
    18d2:	7c a1       	ldd	r23, Y+36	; 0x24
    18d4:	8d a1       	ldd	r24, Y+37	; 0x25
    18d6:	9e a1       	ldd	r25, Y+38	; 0x26
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9a a3       	std	Y+34, r25	; 0x22
    18e2:	89 a3       	std	Y+33, r24	; 0x21
    18e4:	89 a1       	ldd	r24, Y+33	; 0x21
    18e6:	9a a1       	ldd	r25, Y+34	; 0x22
    18e8:	9e 8f       	std	Y+30, r25	; 0x1e
    18ea:	8d 8f       	std	Y+29, r24	; 0x1d
    18ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_init+0x118>
    18f4:	9e 8f       	std	Y+30, r25	; 0x1e
    18f6:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(20);

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	6f ef       	ldi	r22, 0xFF	; 255
    18fc:	0e 94 c5 09 	call	0x138a	; 0x138a <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1900:	88 e3       	ldi	r24, 0x38	; 56
    1902:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#endif
	LCD_sendCommand(0x0E);
    1906:	8e e0       	ldi	r24, 0x0E	; 14
    1908:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <LCD_sendCommand>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a0 e8       	ldi	r26, 0x80	; 128
    1912:	bf e3       	ldi	r27, 0x3F	; 63
    1914:	89 8f       	std	Y+25, r24	; 0x19
    1916:	9a 8f       	std	Y+26, r25	; 0x1a
    1918:	ab 8f       	std	Y+27, r26	; 0x1b
    191a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	69 8d       	ldd	r22, Y+25	; 0x19
    191e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1920:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1922:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4a ef       	ldi	r20, 0xFA	; 250
    192a:	54 e4       	ldi	r21, 0x44	; 68
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8d 8b       	std	Y+21, r24	; 0x15
    1936:	9e 8b       	std	Y+22, r25	; 0x16
    1938:	af 8b       	std	Y+23, r26	; 0x17
    193a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    193c:	6d 89       	ldd	r22, Y+21	; 0x15
    193e:	7e 89       	ldd	r23, Y+22	; 0x16
    1940:	8f 89       	ldd	r24, Y+23	; 0x17
    1942:	98 8d       	ldd	r25, Y+24	; 0x18
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	2c f4       	brge	.+10     	; 0x195e <LCD_init+0x186>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9c 8b       	std	Y+20, r25	; 0x14
    195a:	8b 8b       	std	Y+19, r24	; 0x13
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <LCD_init+0x204>
	else if (__tmp > 65535)
    195e:	6d 89       	ldd	r22, Y+21	; 0x15
    1960:	7e 89       	ldd	r23, Y+22	; 0x16
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	4c f5       	brge	.+82     	; 0x19c8 <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	69 8d       	ldd	r22, Y+25	; 0x19
    1978:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9c 8b       	std	Y+20, r25	; 0x14
    199c:	8b 8b       	std	Y+19, r24	; 0x13
    199e:	0f c0       	rjmp	.+30     	; 0x19be <LCD_init+0x1e6>
    19a0:	88 ec       	ldi	r24, 0xC8	; 200
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9a 8b       	std	Y+18, r25	; 0x12
    19a6:	89 8b       	std	Y+17, r24	; 0x11
    19a8:	89 89       	ldd	r24, Y+17	; 0x11
    19aa:	9a 89       	ldd	r25, Y+18	; 0x12
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_init+0x1d4>
    19b0:	9a 8b       	std	Y+18, r25	; 0x12
    19b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b4:	8b 89       	ldd	r24, Y+19	; 0x13
    19b6:	9c 89       	ldd	r25, Y+20	; 0x14
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	9c 8b       	std	Y+20, r25	; 0x14
    19bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	8b 89       	ldd	r24, Y+19	; 0x13
    19c0:	9c 89       	ldd	r25, Y+20	; 0x14
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <LCD_init+0x1c8>
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ca:	7e 89       	ldd	r23, Y+22	; 0x16
    19cc:	8f 89       	ldd	r24, Y+23	; 0x17
    19ce:	98 8d       	ldd	r25, Y+24	; 0x18
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9c 8b       	std	Y+20, r25	; 0x14
    19da:	8b 8b       	std	Y+19, r24	; 0x13
    19dc:	8b 89       	ldd	r24, Y+19	; 0x13
    19de:	9c 89       	ldd	r25, Y+20	; 0x14
    19e0:	98 8b       	std	Y+16, r25	; 0x10
    19e2:	8f 87       	std	Y+15, r24	; 0x0f
    19e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e6:	98 89       	ldd	r25, Y+16	; 0x10
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <LCD_init+0x210>
    19ec:	98 8b       	std	Y+16, r25	; 0x10
    19ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <LCD_sendCommand>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a0 e8       	ldi	r26, 0x80	; 128
    19fc:	bf e3       	ldi	r27, 0x3F	; 63
    19fe:	8b 87       	std	Y+11, r24	; 0x0b
    1a00:	9c 87       	std	Y+12, r25	; 0x0c
    1a02:	ad 87       	std	Y+13, r26	; 0x0d
    1a04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	4a ef       	ldi	r20, 0xFA	; 250
    1a14:	54 e4       	ldi	r21, 0x44	; 68
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8f 83       	std	Y+7, r24	; 0x07
    1a20:	98 87       	std	Y+8, r25	; 0x08
    1a22:	a9 87       	std	Y+9, r26	; 0x09
    1a24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a26:	6f 81       	ldd	r22, Y+7	; 0x07
    1a28:	78 85       	ldd	r23, Y+8	; 0x08
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <LCD_init+0x270>
		__ticks = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	3f c0       	rjmp	.+126    	; 0x1ac6 <LCD_init+0x2ee>
	else if (__tmp > 65535)
    1a48:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4a:	78 85       	ldd	r23, Y+8	; 0x08
    1a4c:	89 85       	ldd	r24, Y+9	; 0x09
    1a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	3f ef       	ldi	r19, 0xFF	; 255
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	57 e4       	ldi	r21, 0x47	; 71
    1a58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	4c f5       	brge	.+82     	; 0x1ab2 <LCD_init+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	51 e4       	ldi	r21, 0x41	; 65
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9e 83       	std	Y+6, r25	; 0x06
    1a86:	8d 83       	std	Y+5, r24	; 0x05
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <LCD_init+0x2d0>
    1a8a:	88 ec       	ldi	r24, 0xC8	; 200
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9c 83       	std	Y+4, r25	; 0x04
    1a90:	8b 83       	std	Y+3, r24	; 0x03
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCD_init+0x2be>
    1a9a:	9c 83       	std	Y+4, r25	; 0x04
    1a9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	69 f7       	brne	.-38     	; 0x1a8a <LCD_init+0x2b2>
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <LCD_init+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab4:	78 85       	ldd	r23, Y+8	; 0x08
    1ab6:	89 85       	ldd	r24, Y+9	; 0x09
    1ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aca:	9a 83       	std	Y+2, r25	; 0x02
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_init+0x2fa>
    1ad6:	9a 83       	std	Y+2, r25	; 0x02
    1ad8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_sendCommand(0x06);
    1ada:	86 e0       	ldi	r24, 0x06	; 6
    1adc:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <LCD_sendCommand>
}
    1ae0:	aa 96       	adiw	r28, 0x2a	; 42
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <send_falling_edge>:
static void send_falling_edge(void)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	6c 97       	sbiw	r28, 0x1c	; 28
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
    1b16:	b0 e4       	ldi	r27, 0x40	; 64
    1b18:	89 8f       	std	Y+25, r24	; 0x19
    1b1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	69 8d       	ldd	r22, Y+25	; 0x19
    1b22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	4a ef       	ldi	r20, 0xFA	; 250
    1b2e:	54 e4       	ldi	r21, 0x44	; 68
    1b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8d 8b       	std	Y+21, r24	; 0x15
    1b3a:	9e 8b       	std	Y+22, r25	; 0x16
    1b3c:	af 8b       	std	Y+23, r26	; 0x17
    1b3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b40:	6d 89       	ldd	r22, Y+21	; 0x15
    1b42:	7e 89       	ldd	r23, Y+22	; 0x16
    1b44:	8f 89       	ldd	r24, Y+23	; 0x17
    1b46:	98 8d       	ldd	r25, Y+24	; 0x18
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <send_falling_edge+0x70>
		__ticks = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9c 8b       	std	Y+20, r25	; 0x14
    1b5e:	8b 8b       	std	Y+19, r24	; 0x13
    1b60:	3f c0       	rjmp	.+126    	; 0x1be0 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    1b62:	6d 89       	ldd	r22, Y+21	; 0x15
    1b64:	7e 89       	ldd	r23, Y+22	; 0x16
    1b66:	8f 89       	ldd	r24, Y+23	; 0x17
    1b68:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	4f e7       	ldi	r20, 0x7F	; 127
    1b70:	57 e4       	ldi	r21, 0x47	; 71
    1b72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	4c f5       	brge	.+82     	; 0x1bcc <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e2       	ldi	r20, 0x20	; 32
    1b88:	51 e4       	ldi	r21, 0x41	; 65
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ba0:	8b 8b       	std	Y+19, r24	; 0x13
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <send_falling_edge+0xd0>
    1ba4:	88 ec       	ldi	r24, 0xC8	; 200
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9a 8b       	std	Y+18, r25	; 0x12
    1baa:	89 8b       	std	Y+17, r24	; 0x11
    1bac:	89 89       	ldd	r24, Y+17	; 0x11
    1bae:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <send_falling_edge+0xbe>
    1bb4:	9a 8b       	std	Y+18, r25	; 0x12
    1bb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bba:	9c 89       	ldd	r25, Y+20	; 0x14
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	9c 8b       	std	Y+20, r25	; 0x14
    1bc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	69 f7       	brne	.-38     	; 0x1ba4 <send_falling_edge+0xb2>
    1bca:	14 c0       	rjmp	.+40     	; 0x1bf4 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bce:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9c 8b       	std	Y+20, r25	; 0x14
    1bde:	8b 8b       	std	Y+19, r24	; 0x13
    1be0:	8b 89       	ldd	r24, Y+19	; 0x13
    1be2:	9c 89       	ldd	r25, Y+20	; 0x14
    1be4:	98 8b       	std	Y+16, r25	; 0x10
    1be6:	8f 87       	std	Y+15, r24	; 0x0f
    1be8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bea:	98 89       	ldd	r25, Y+16	; 0x10
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <send_falling_edge+0xfa>
    1bf0:	98 8b       	std	Y+16, r25	; 0x10
    1bf2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a0 e0       	ldi	r26, 0x00	; 0
    1c04:	b0 e4       	ldi	r27, 0x40	; 64
    1c06:	8b 87       	std	Y+11, r24	; 0x0b
    1c08:	9c 87       	std	Y+12, r25	; 0x0c
    1c0a:	ad 87       	std	Y+13, r26	; 0x0d
    1c0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a ef       	ldi	r20, 0xFA	; 250
    1c1c:	54 e4       	ldi	r21, 0x44	; 68
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	8f 83       	std	Y+7, r24	; 0x07
    1c28:	98 87       	std	Y+8, r25	; 0x08
    1c2a:	a9 87       	std	Y+9, r26	; 0x09
    1c2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c30:	78 85       	ldd	r23, Y+8	; 0x08
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
    1c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e8       	ldi	r20, 0x80	; 128
    1c3c:	5f e3       	ldi	r21, 0x3F	; 63
    1c3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c42:	88 23       	and	r24, r24
    1c44:	2c f4       	brge	.+10     	; 0x1c50 <send_falling_edge+0x15e>
		__ticks = 1;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	3f c0       	rjmp	.+126    	; 0x1cce <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    1c50:	6f 81       	ldd	r22, Y+7	; 0x07
    1c52:	78 85       	ldd	r23, Y+8	; 0x08
    1c54:	89 85       	ldd	r24, Y+9	; 0x09
    1c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	3f ef       	ldi	r19, 0xFF	; 255
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	57 e4       	ldi	r21, 0x47	; 71
    1c60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	4c f5       	brge	.+82     	; 0x1cba <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	51 e4       	ldi	r21, 0x41	; 65
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <send_falling_edge+0x1be>
    1c92:	88 ec       	ldi	r24, 0xC8	; 200
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9c 83       	std	Y+4, r25	; 0x04
    1c98:	8b 83       	std	Y+3, r24	; 0x03
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <send_falling_edge+0x1ac>
    1ca2:	9c 83       	std	Y+4, r25	; 0x04
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	9e 83       	std	Y+6, r25	; 0x06
    1cae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	69 f7       	brne	.-38     	; 0x1c92 <send_falling_edge+0x1a0>
    1cb8:	14 c0       	rjmp	.+40     	; 0x1ce2 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cba:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbc:	78 85       	ldd	r23, Y+8	; 0x08
    1cbe:	89 85       	ldd	r24, Y+9	; 0x09
    1cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <send_falling_edge+0x1e8>
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ce2:	6c 96       	adiw	r28, 0x1c	; 28
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	2f 97       	sbiw	r28, 0x0f	; 15
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	8f 87       	std	Y+15, r24	; 0x0f
#if(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command);
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d0e:	0e 94 09 0a 	call	0x1412	; 0x1412 <GPIO_writePort>
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	62 e0       	ldi	r22, 0x02	; 2
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	send_falling_edge();
    1d1c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <send_falling_edge>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a0 e8       	ldi	r26, 0x80	; 128
    1d26:	bf e3       	ldi	r27, 0x3F	; 63
    1d28:	8b 87       	std	Y+11, r24	; 0x0b
    1d2a:	9c 87       	std	Y+12, r25	; 0x0c
    1d2c:	ad 87       	std	Y+13, r26	; 0x0d
    1d2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a ef       	ldi	r20, 0xFA	; 250
    1d3e:	54 e4       	ldi	r21, 0x44	; 68
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	8f 83       	std	Y+7, r24	; 0x07
    1d4a:	98 87       	std	Y+8, r25	; 0x08
    1d4c:	a9 87       	std	Y+9, r26	; 0x09
    1d4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e8       	ldi	r20, 0x80	; 128
    1d5e:	5f e3       	ldi	r21, 0x3F	; 63
    1d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1d72:	6f 81       	ldd	r22, Y+7	; 0x07
    1d74:	78 85       	ldd	r23, Y+8	; 0x08
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	57 e4       	ldi	r21, 0x47	; 71
    1d82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	4c f5       	brge	.+82     	; 0x1ddc <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9e 83       	std	Y+6, r25	; 0x06
    1db0:	8d 83       	std	Y+5, r24	; 0x05
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <LCD_sendCommand+0xde>
    1db4:	88 ec       	ldi	r24, 0xC8	; 200
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9c 83       	std	Y+4, r25	; 0x04
    1dba:	8b 83       	std	Y+3, r24	; 0x03
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_sendCommand+0xcc>
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f7       	brne	.-38     	; 0x1db4 <LCD_sendCommand+0xc0>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	9a 83       	std	Y+2, r25	; 0x02
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <LCD_sendCommand+0x108>
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#endif
	_delay_ms(1);
}
    1e04:	2f 96       	adiw	r28, 0x0f	; 15
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	2f 97       	sbiw	r28, 0x0f	; 15
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	8f 87       	std	Y+15, r24	; 0x0f
#if(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e30:	0e 94 09 0a 	call	0x1412	; 0x1412 <GPIO_writePort>
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	62 e0       	ldi	r22, 0x02	; 2
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	send_falling_edge();
    1e3e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <send_falling_edge>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	a0 e8       	ldi	r26, 0x80	; 128
    1e48:	bf e3       	ldi	r27, 0x3F	; 63
    1e4a:	8b 87       	std	Y+11, r24	; 0x0b
    1e4c:	9c 87       	std	Y+12, r25	; 0x0c
    1e4e:	ad 87       	std	Y+13, r26	; 0x0d
    1e50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a ef       	ldi	r20, 0xFA	; 250
    1e60:	54 e4       	ldi	r21, 0x44	; 68
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	8f 83       	std	Y+7, r24	; 0x07
    1e6c:	98 87       	std	Y+8, r25	; 0x08
    1e6e:	a9 87       	std	Y+9, r26	; 0x09
    1e70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e72:	6f 81       	ldd	r22, Y+7	; 0x07
    1e74:	78 85       	ldd	r23, Y+8	; 0x08
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e8       	ldi	r20, 0x80	; 128
    1e80:	5f e3       	ldi	r21, 0x3F	; 63
    1e82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e86:	88 23       	and	r24, r24
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	3f c0       	rjmp	.+126    	; 0x1f12 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ea0:	4f e7       	ldi	r20, 0x7F	; 127
    1ea2:	57 e4       	ldi	r21, 0x47	; 71
    1ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea8:	18 16       	cp	r1, r24
    1eaa:	4c f5       	brge	.+82     	; 0x1efe <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e2       	ldi	r20, 0x20	; 32
    1eba:	51 e4       	ldi	r21, 0x41	; 65
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	cd 01       	movw	r24, r26
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	0f c0       	rjmp	.+30     	; 0x1ef4 <LCD_displayCharacter+0xde>
    1ed6:	88 ec       	ldi	r24, 0xC8	; 200
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	8b 83       	std	Y+3, r24	; 0x03
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_displayCharacter+0xcc>
    1ee6:	9c 83       	std	Y+4, r25	; 0x04
    1ee8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	69 f7       	brne	.-38     	; 0x1ed6 <LCD_displayCharacter+0xc0>
    1efc:	14 c0       	rjmp	.+40     	; 0x1f26 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efe:	6f 81       	ldd	r22, Y+7	; 0x07
    1f00:	78 85       	ldd	r23, Y+8	; 0x08
    1f02:	89 85       	ldd	r24, Y+9	; 0x09
    1f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_displayCharacter+0x108>
    1f22:	9a 83       	std	Y+2, r25	; 0x02
    1f24:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#endif
	_delay_ms(1);
}
    1f26:	2f 96       	adiw	r28, 0x0f	; 15
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <LCD_displayString>:

void LCD_displayString(char * string)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <LCD_displayString+0x6>
    1f3e:	0f 92       	push	r0
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	9b 83       	std	Y+3, r25	; 0x03
    1f46:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    1f48:	19 82       	std	Y+1, r1	; 0x01
    1f4a:	0e c0       	rjmp	.+28     	; 0x1f68 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(string[i]);
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	fc 01       	movw	r30, r24
    1f58:	e2 0f       	add	r30, r18
    1f5a:	f3 1f       	adc	r31, r19
    1f5c:	80 81       	ld	r24, Z
    1f5e:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_displayCharacter>
	_delay_ms(1);
}

void LCD_displayString(char * string)
{
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	8f 5f       	subi	r24, 0xFF	; 255
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	9b 81       	ldd	r25, Y+3	; 0x03
    1f72:	fc 01       	movw	r30, r24
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	80 81       	ld	r24, Z
    1f7a:	88 23       	and	r24, r24
    1f7c:	39 f7       	brne	.-50     	; 0x1f4c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
	}
}
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <LCD_clearScreen>:

void LCD_clearScreen()
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	2e 97       	sbiw	r28, 0x0e	; 14
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <LCD_sendCommand>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e2       	ldi	r26, 0x20	; 32
    1faa:	b1 e4       	ldi	r27, 0x41	; 65
    1fac:	8b 87       	std	Y+11, r24	; 0x0b
    1fae:	9c 87       	std	Y+12, r25	; 0x0c
    1fb0:	ad 87       	std	Y+13, r26	; 0x0d
    1fb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a ef       	ldi	r20, 0xFA	; 250
    1fc2:	54 e4       	ldi	r21, 0x44	; 68
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8f 83       	std	Y+7, r24	; 0x07
    1fce:	98 87       	std	Y+8, r25	; 0x08
    1fd0:	a9 87       	std	Y+9, r26	; 0x09
    1fd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd6:	78 85       	ldd	r23, Y+8	; 0x08
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <LCD_clearScreen+0x6c>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <LCD_clearScreen+0xea>
	else if (__tmp > 65535)
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <LCD_clearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2010:	7c 85       	ldd	r23, Y+12	; 0x0c
    2012:	8d 85       	ldd	r24, Y+13	; 0x0d
    2014:	9e 85       	ldd	r25, Y+14	; 0x0e
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <LCD_clearScreen+0xcc>
    2038:	88 ec       	ldi	r24, 0xC8	; 200
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	8b 83       	std	Y+3, r24	; 0x03
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_clearScreen+0xba>
    2048:	9c 83       	std	Y+4, r25	; 0x04
    204a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9e 83       	std	Y+6, r25	; 0x06
    2054:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <LCD_clearScreen+0xae>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <LCD_clearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	6f 81       	ldd	r22, Y+7	; 0x07
    2062:	78 85       	ldd	r23, Y+8	; 0x08
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	9a 83       	std	Y+2, r25	; 0x02
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_clearScreen+0xf6>
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2088:	2e 96       	adiw	r28, 0x0e	; 14
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 column)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <LCD_moveCursor+0x6>
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <LCD_moveCursor+0x8>
    20a2:	0f 92       	push	r0
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	8a 83       	std	Y+2, r24	; 0x02
    20aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_cursorAdress;
	switch(row)
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	3d 83       	std	Y+5, r19	; 0x05
    20b4:	2c 83       	std	Y+4, r18	; 0x04
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	91 05       	cpc	r25, r1
    20be:	c1 f0       	breq	.+48     	; 0x20f0 <LCD_moveCursor+0x56>
    20c0:	2c 81       	ldd	r18, Y+4	; 0x04
    20c2:	3d 81       	ldd	r19, Y+5	; 0x05
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <LCD_moveCursor+0x3a>
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	61 f0       	breq	.+24     	; 0x20ea <LCD_moveCursor+0x50>
    20d2:	19 c0       	rjmp	.+50     	; 0x2106 <LCD_moveCursor+0x6c>
    20d4:	2c 81       	ldd	r18, Y+4	; 0x04
    20d6:	3d 81       	ldd	r19, Y+5	; 0x05
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	69 f0       	breq	.+26     	; 0x20f8 <LCD_moveCursor+0x5e>
    20de:	8c 81       	ldd	r24, Y+4	; 0x04
    20e0:	9d 81       	ldd	r25, Y+5	; 0x05
    20e2:	83 30       	cpi	r24, 0x03	; 3
    20e4:	91 05       	cpc	r25, r1
    20e6:	61 f0       	breq	.+24     	; 0x2100 <LCD_moveCursor+0x66>
    20e8:	0e c0       	rjmp	.+28     	; 0x2106 <LCD_moveCursor+0x6c>
	{
	case 0:
		LCD_cursorAdress = column;
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	0b c0       	rjmp	.+22     	; 0x2106 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_cursorAdress = 0x40 + column;
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	80 5c       	subi	r24, 0xC0	; 192
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	07 c0       	rjmp	.+14     	; 0x2106 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_cursorAdress = 0x10 + column;
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	80 5f       	subi	r24, 0xF0	; 240
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	03 c0       	rjmp	.+6      	; 0x2106 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_cursorAdress = 0x50 + column;
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	80 5b       	subi	r24, 0xB0	; 176
    2104:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_cursorAdress |= LCD_SET_CURSOR_LOCATION ;
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	80 68       	ori	r24, 0x80	; 128
    210a:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_cursorAdress);
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <LCD_sendCommand>
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row , uint8 column , char * string)
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	00 d0       	rcall	.+0      	; 0x2128 <LCD_displayStringRowColumn+0x6>
    2128:	00 d0       	rcall	.+0      	; 0x212a <LCD_displayStringRowColumn+0x8>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	6a 83       	std	Y+2, r22	; 0x02
    2132:	5c 83       	std	Y+4, r21	; 0x04
    2134:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	6a 81       	ldd	r22, Y+2	; 0x02
    213a:	0e 94 4d 10 	call	0x209a	; 0x209a <LCD_moveCursor>
	LCD_displayString(string);
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_displayString>
}
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <LCD_intgerToString>:

void LCD_intgerToString(int number)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	62 97       	sbiw	r28, 0x12	; 18
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	9a 8b       	std	Y+18, r25	; 0x12
    216a:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(number,buffer,10);
    216c:	89 89       	ldd	r24, Y+17	; 0x11
    216e:	9a 89       	ldd	r25, Y+18	; 0x12
    2170:	9e 01       	movw	r18, r28
    2172:	2f 5f       	subi	r18, 0xFF	; 255
    2174:	3f 4f       	sbci	r19, 0xFF	; 255
    2176:	b9 01       	movw	r22, r18
    2178:	4a e0       	ldi	r20, 0x0A	; 10
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	0e 94 43 18 	call	0x3086	; 0x3086 <itoa>
	LCD_displayString(buffer);
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_displayString>
}
    2188:	62 96       	adiw	r28, 0x12	; 18
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <KEYPAD_init>:

/*******************************************************************************
*                      Functions Definitions                                  *
*******************************************************************************/
void KEYPAD_init()
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, LOGIC_HIGH);
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	63 e0       	ldi	r22, 0x03	; 3
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, LOGIC_HIGH);
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	64 e0       	ldi	r22, 0x04	; 4
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, LOGIC_HIGH);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	65 e0       	ldi	r22, 0x05	; 5
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, LOGIC_HIGH);
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	66 e0       	ldi	r22, 0x06	; 6
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, LOGIC_LOW);
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	64 e0       	ldi	r22, 0x04	; 4
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, LOGIC_LOW);
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	65 e0       	ldi	r22, 0x05	; 5
    21d8:	40 e0       	ldi	r20, 0x00	; 0
    21da:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, LOGIC_LOW);
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	66 e0       	ldi	r22, 0x06	; 6
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, LOGIC_LOW);
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	67 e0       	ldi	r22, 0x07	; 7
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, LOGIC_HIGH);
    21f2:	82 e0       	ldi	r24, 0x02	; 2
    21f4:	64 e0       	ldi	r22, 0x04	; 4
    21f6:	41 e0       	ldi	r20, 0x01	; 1
    21f8:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, LOGIC_HIGH);
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	65 e0       	ldi	r22, 0x05	; 5
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, LOGIC_HIGH);
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	66 e0       	ldi	r22, 0x06	; 6
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, LOGIC_HIGH);
    2210:	82 e0       	ldi	r24, 0x02	; 2
    2212:	67 e0       	ldi	r22, 0x07	; 7
    2214:	41 e0       	ldi	r20, 0x01	; 1
    2216:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
}
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <KEYPAD_getPressedKey>:

uint8 KEYPAD_getPressedKey()
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	6a 97       	sbiw	r28, 0x1a	; 26
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
//	 char arr[4][4]={{'D','C','B','A'},{'#','9','6','3'},{'0','8','5','2'},{'*','7','4','1'}}; /* Hardware */
	 char arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}}; /* Software */
    2234:	ce 01       	movw	r24, r28
    2236:	05 96       	adiw	r24, 0x05	; 5
    2238:	9f 8b       	std	Y+23, r25	; 0x17
    223a:	8e 8b       	std	Y+22, r24	; 0x16
    223c:	e2 e7       	ldi	r30, 0x72	; 114
    223e:	f1 e0       	ldi	r31, 0x01	; 1
    2240:	f9 8f       	std	Y+25, r31	; 0x19
    2242:	e8 8f       	std	Y+24, r30	; 0x18
    2244:	f0 e1       	ldi	r31, 0x10	; 16
    2246:	fa 8f       	std	Y+26, r31	; 0x1a
    2248:	e8 8d       	ldd	r30, Y+24	; 0x18
    224a:	f9 8d       	ldd	r31, Y+25	; 0x19
    224c:	00 80       	ld	r0, Z
    224e:	88 8d       	ldd	r24, Y+24	; 0x18
    2250:	99 8d       	ldd	r25, Y+25	; 0x19
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	99 8f       	std	Y+25, r25	; 0x19
    2256:	88 8f       	std	Y+24, r24	; 0x18
    2258:	ee 89       	ldd	r30, Y+22	; 0x16
    225a:	ff 89       	ldd	r31, Y+23	; 0x17
    225c:	00 82       	st	Z, r0
    225e:	8e 89       	ldd	r24, Y+22	; 0x16
    2260:	9f 89       	ldd	r25, Y+23	; 0x17
    2262:	01 96       	adiw	r24, 0x01	; 1
    2264:	9f 8b       	std	Y+23, r25	; 0x17
    2266:	8e 8b       	std	Y+22, r24	; 0x16
    2268:	9a 8d       	ldd	r25, Y+26	; 0x1a
    226a:	91 50       	subi	r25, 0x01	; 1
    226c:	9a 8f       	std	Y+26, r25	; 0x1a
    226e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2270:	ee 23       	and	r30, r30
    2272:	51 f7       	brne	.-44     	; 0x2248 <KEYPAD_getPressedKey+0x28>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
    2274:	8f ef       	ldi	r24, 0xFF	; 255
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	57 c0       	rjmp	.+174    	; 0x2328 <KEYPAD_getPressedKey+0x108>
	 while(returnval == NOTPRESSED)
	 {
		 for(row=0;row<4;row++)
    227a:	1c 82       	std	Y+4, r1	; 0x04
    227c:	4a c0       	rjmp	.+148    	; 0x2312 <KEYPAD_getPressedKey+0xf2>
		 {
			 GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, LOGIC_HIGH);
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	63 e0       	ldi	r22, 0x03	; 3
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
			 GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, LOGIC_HIGH);
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	64 e0       	ldi	r22, 0x04	; 4
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
			 GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, LOGIC_HIGH);
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	65 e0       	ldi	r22, 0x05	; 5
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
			 GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, LOGIC_HIGH);
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	66 e0       	ldi	r22, 0x06	; 6
    22a0:	41 e0       	ldi	r20, 0x01	; 1
    22a2:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
			 GPIO_writePin(KEYPAD_ROWS_PORT_ID, row+KEYPAD_FIRST_ROW_PIN_ID, LOGIC_LOW);
    22a6:	8c 81       	ldd	r24, Y+4	; 0x04
    22a8:	98 2f       	mov	r25, r24
    22aa:	9d 5f       	subi	r25, 0xFD	; 253
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	69 2f       	mov	r22, r25
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>

			for(coloumn=0;coloumn<4;coloumn++)
    22b6:	1b 82       	std	Y+3, r1	; 0x03
    22b8:	23 c0       	rjmp	.+70     	; 0x2300 <KEYPAD_getPressedKey+0xe0>
			{
				x= GPIO_readPin(KEYPAD_COL_PORT_ID, coloumn+4);
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	98 2f       	mov	r25, r24
    22be:	9c 5f       	subi	r25, 0xFC	; 252
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	69 2f       	mov	r22, r25
    22c4:	0e 94 2a 09 	call	0x1254	; 0x1254 <GPIO_readPin>
    22c8:	8a 83       	std	Y+2, r24	; 0x02
				if(x==0)
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	88 23       	and	r24, r24
    22ce:	a9 f4       	brne	.+42     	; 0x22fa <KEYPAD_getPressedKey+0xda>
				 {
					 returnval=arr[row][coloumn];
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	48 2f       	mov	r20, r24
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	22 0f       	add	r18, r18
    22de:	33 1f       	adc	r19, r19
    22e0:	22 0f       	add	r18, r18
    22e2:	33 1f       	adc	r19, r19
    22e4:	ce 01       	movw	r24, r28
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	82 0f       	add	r24, r18
    22ea:	93 1f       	adc	r25, r19
    22ec:	84 0f       	add	r24, r20
    22ee:	95 1f       	adc	r25, r21
    22f0:	fc 01       	movw	r30, r24
    22f2:	34 96       	adiw	r30, 0x04	; 4
    22f4:	80 81       	ld	r24, Z
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	06 c0       	rjmp	.+12     	; 0x2306 <KEYPAD_getPressedKey+0xe6>
			 GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, LOGIC_HIGH);
			 GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, LOGIC_HIGH);
			 GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, LOGIC_HIGH);
			 GPIO_writePin(KEYPAD_ROWS_PORT_ID, row+KEYPAD_FIRST_ROW_PIN_ID, LOGIC_LOW);

			for(coloumn=0;coloumn<4;coloumn++)
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	8f 5f       	subi	r24, 0xFF	; 255
    22fe:	8b 83       	std	Y+3, r24	; 0x03
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	84 30       	cpi	r24, 0x04	; 4
    2304:	d0 f2       	brcs	.-76     	; 0x22ba <KEYPAD_getPressedKey+0x9a>
				 {
					 returnval=arr[row][coloumn];
					 break;
				 }
			}
			if(x==0)
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	88 23       	and	r24, r24
    230a:	39 f0       	breq	.+14     	; 0x231a <KEYPAD_getPressedKey+0xfa>
	 char arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}}; /* Software */
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 while(returnval == NOTPRESSED)
	 {
		 for(row=0;row<4;row++)
    230c:	8c 81       	ldd	r24, Y+4	; 0x04
    230e:	8f 5f       	subi	r24, 0xFF	; 255
    2310:	8c 83       	std	Y+4, r24	; 0x04
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	84 30       	cpi	r24, 0x04	; 4
    2316:	08 f4       	brcc	.+2      	; 0x231a <KEYPAD_getPressedKey+0xfa>
    2318:	b2 cf       	rjmp	.-156    	; 0x227e <KEYPAD_getPressedKey+0x5e>
			if(x==0)
			{
				break;
			}
		}
		 if(returnval != NOTPRESSED)
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	8f 3f       	cpi	r24, 0xFF	; 255
    231e:	21 f0       	breq	.+8      	; 0x2328 <KEYPAD_getPressedKey+0x108>
		 return returnval ;
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	8d 8b       	std	Y+21, r24	; 0x15
	 }
}
    2324:	8d 89       	ldd	r24, Y+21	; 0x15
    2326:	04 c0       	rjmp	.+8      	; 0x2330 <KEYPAD_getPressedKey+0x110>
{
//	 char arr[4][4]={{'D','C','B','A'},{'#','9','6','3'},{'0','8','5','2'},{'*','7','4','1'}}; /* Hardware */
	 char arr[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}}; /* Software */
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 while(returnval == NOTPRESSED)
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	8f 3f       	cpi	r24, 0xFF	; 255
    232c:	09 f4       	brne	.+2      	; 0x2330 <KEYPAD_getPressedKey+0x110>
    232e:	a5 cf       	rjmp	.-182    	; 0x227a <KEYPAD_getPressedKey+0x5a>
			}
		}
		 if(returnval != NOTPRESSED)
		 return returnval ;
	 }
}
    2330:	6a 96       	adiw	r28, 0x1a	; 26
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <BUZZER_init>:

#include "buzzer.h"
#include "../../MCAL/GPIO/gpio.h"

void BUZZER_init(void)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    234a:	83 e0       	ldi	r24, 0x03	; 3
    234c:	64 e0       	ldi	r22, 0x04	; 4
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 54 07 	call	0xea8	; 0xea8 <GPIO_setupPinDirection>
}
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <BUZZER_on>:

void BUZZER_on(void)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    2362:	83 e0       	ldi	r24, 0x03	; 3
    2364:	64 e0       	ldi	r22, 0x04	; 4
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
}
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <BUZZER_off>:

void BUZZER_off(void)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    237a:	83 e0       	ldi	r24, 0x03	; 3
    237c:	64 e0       	ldi	r22, 0x04	; 4
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	0e 94 3f 08 	call	0x107e	; 0x107e <GPIO_writePin>
}
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <__vector_10>:
void APP_door();
void APP_changePassword();
void APP_alarm();

ISR(TIMER0_COMP_vect)
{
    238a:	1f 92       	push	r1
    238c:	0f 92       	push	r0
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	0f 92       	push	r0
    2392:	11 24       	eor	r1, r1
    2394:	8f 93       	push	r24
    2396:	9f 93       	push	r25
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
	g_ticks0++;
    23a0:	80 91 89 01 	lds	r24, 0x0189
    23a4:	90 91 8a 01 	lds	r25, 0x018A
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	90 93 8a 01 	sts	0x018A, r25
    23ae:	80 93 89 01 	sts	0x0189, r24
}
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	9f 91       	pop	r25
    23b8:	8f 91       	pop	r24
    23ba:	0f 90       	pop	r0
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	0f 90       	pop	r0
    23c0:	1f 90       	pop	r1
    23c2:	18 95       	reti

000023c4 <__vector_13>:

char String[20]; // Global variable to store the char received from UART

ISR(USART_RXC_vect)
{
    23c4:	1f 92       	push	r1
    23c6:	0f 92       	push	r0
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	0f 92       	push	r0
    23cc:	11 24       	eor	r1, r1
    23ce:	2f 93       	push	r18
    23d0:	3f 93       	push	r19
    23d2:	4f 93       	push	r20
    23d4:	5f 93       	push	r21
    23d6:	6f 93       	push	r22
    23d8:	7f 93       	push	r23
    23da:	8f 93       	push	r24
    23dc:	9f 93       	push	r25
    23de:	af 93       	push	r26
    23e0:	bf 93       	push	r27
    23e2:	ef 93       	push	r30
    23e4:	ff 93       	push	r31
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter ;
	String[counter] = UDR;
    23ee:	80 91 8d 01 	lds	r24, 0x018D
    23f2:	88 2f       	mov	r24, r24
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	ec e2       	ldi	r30, 0x2C	; 44
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	20 81       	ld	r18, Z
    23fc:	fc 01       	movw	r30, r24
    23fe:	ef 56       	subi	r30, 0x6F	; 111
    2400:	fe 4f       	sbci	r31, 0xFE	; 254
    2402:	20 83       	st	Z, r18
	if(String[counter] == '#')
    2404:	80 91 8d 01 	lds	r24, 0x018D
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	fc 01       	movw	r30, r24
    240e:	ef 56       	subi	r30, 0x6F	; 111
    2410:	fe 4f       	sbci	r31, 0xFE	; 254
    2412:	80 81       	ld	r24, Z
    2414:	83 32       	cpi	r24, 0x23	; 35
    2416:	d1 f5       	brne	.+116    	; 0x248c <__vector_13+0xc8>
	{
		String[counter] = '\0';
    2418:	80 91 8d 01 	lds	r24, 0x018D
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	fc 01       	movw	r30, r24
    2422:	ef 56       	subi	r30, 0x6F	; 111
    2424:	fe 4f       	sbci	r31, 0xFE	; 254
    2426:	10 82       	st	Z, r1
		counter = 0 ; // to receive new string in the same buffer
    2428:	10 92 8d 01 	sts	0x018D, r1
	    if((strcmp(String,"*light") == 0) || (strcmp(String,"*Light") == 0))
    242c:	81 e9       	ldi	r24, 0x91	; 145
    242e:	91 e0       	ldi	r25, 0x01	; 1
    2430:	20 e6       	ldi	r18, 0x60	; 96
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	b9 01       	movw	r22, r18
    2436:	0e 94 3a 18 	call	0x3074	; 0x3074 <strcmp>
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	49 f0       	breq	.+18     	; 0x2450 <__vector_13+0x8c>
    243e:	81 e9       	ldi	r24, 0x91	; 145
    2440:	91 e0       	ldi	r25, 0x01	; 1
    2442:	27 e6       	ldi	r18, 0x67	; 103
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	b9 01       	movw	r22, r18
    2448:	0e 94 3a 18 	call	0x3074	; 0x3074 <strcmp>
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	21 f4       	brne	.+8      	; 0x2458 <__vector_13+0x94>
		{
			LED_TOGGLE(RED);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LED_TOGGLE>
    2456:	1f c0       	rjmp	.+62     	; 0x2496 <__vector_13+0xd2>
		}
	    else if((strcmp(String,"*turn on the fan") == 0))
    2458:	81 e9       	ldi	r24, 0x91	; 145
    245a:	91 e0       	ldi	r25, 0x01	; 1
    245c:	2e e6       	ldi	r18, 0x6E	; 110
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	b9 01       	movw	r22, r18
    2462:	0e 94 3a 18 	call	0x3074	; 0x3074 <strcmp>
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	21 f4       	brne	.+8      	; 0x2472 <__vector_13+0xae>
	    {
	    	FanMotor_Rotate(DcMotor_CW);
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <FanMotor_Rotate>
    2470:	12 c0       	rjmp	.+36     	; 0x2496 <__vector_13+0xd2>
	    }
	    else if((strcmp(String,"*turn off the fan") == 0))
    2472:	81 e9       	ldi	r24, 0x91	; 145
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	2f e7       	ldi	r18, 0x7F	; 127
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	b9 01       	movw	r22, r18
    247c:	0e 94 3a 18 	call	0x3074	; 0x3074 <strcmp>
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	49 f4       	brne	.+18     	; 0x2496 <__vector_13+0xd2>
	    {
	    	FanMotor_Rotate(DcMotor_STOP);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <FanMotor_Rotate>
    248a:	05 c0       	rjmp	.+10     	; 0x2496 <__vector_13+0xd2>
	    }
	}
	else
	{
		counter++;
    248c:	80 91 8d 01 	lds	r24, 0x018D
    2490:	8f 5f       	subi	r24, 0xFF	; 255
    2492:	80 93 8d 01 	sts	0x018D, r24
	}
}
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	0f 90       	pop	r0
    24b8:	1f 90       	pop	r1
    24ba:	18 95       	reti

000024bc <main>:

int main(void)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <main+0x6>
    24c2:	0f 92       	push	r0
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
	LED_Init();
    24c8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <LED_Init>
	UART_init(9600);
    24cc:	60 e8       	ldi	r22, 0x80	; 128
    24ce:	75 e2       	ldi	r23, 0x25	; 37
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	DoorMotor_Init();
    24d8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DoorMotor_Init>
	FanMotor_Init();
    24dc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <FanMotor_Init>
	BUZZER_init();
    24e0:	0e 94 a1 11 	call	0x2342	; 0x2342 <BUZZER_init>
	KEYPAD_init();
    24e4:	0e 94 cd 10 	call	0x219a	; 0x219a <KEYPAD_init>
	LCD_init();
    24e8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCD_init>
	sei();
    24ec:	78 94       	sei

	if(eeprom_read_byte(PasswordFlagAddress) != PasswordIsSet)
    24ee:	80 e1       	ldi	r24, 0x10	; 16
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__eerd_byte_m32>
    24f6:	83 3c       	cpi	r24, 0xC3	; 195
    24f8:	11 f0       	breq	.+4      	; 0x24fe <main+0x42>
	{
		APP_setPassword();
    24fa:	0e 94 ad 12 	call	0x255a	; 0x255a <APP_setPassword>
	}

	while(1)
	{
		LCD_clearScreen();
    24fe:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "* : Open Door");
    2502:	21 e9       	ldi	r18, 0x91	; 145
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	a9 01       	movw	r20, r18
    250c:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "# : Change Pass");
    2510:	2f e9       	ldi	r18, 0x9F	; 159
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	a9 01       	movw	r20, r18
    251a:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
		uint8 menuKey;
		do
		{
			menuKey = KEYPAD_getPressedKey();
    251e:	0e 94 10 11 	call	0x2220	; 0x2220 <KEYPAD_getPressedKey>
    2522:	89 83       	std	Y+1, r24	; 0x01
		}while((menuKey != '*') && (menuKey != '#'));
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	8a 32       	cpi	r24, 0x2A	; 42
    2528:	19 f0       	breq	.+6      	; 0x2530 <main+0x74>
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	83 32       	cpi	r24, 0x23	; 35
    252e:	b9 f7       	brne	.-18     	; 0x251e <main+0x62>
		switch(menuKey)
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	3b 83       	std	Y+3, r19	; 0x03
    2538:	2a 83       	std	Y+2, r18	; 0x02
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	9b 81       	ldd	r25, Y+3	; 0x03
    253e:	83 32       	cpi	r24, 0x23	; 35
    2540:	91 05       	cpc	r25, r1
    2542:	41 f0       	breq	.+16     	; 0x2554 <main+0x98>
    2544:	2a 81       	ldd	r18, Y+2	; 0x02
    2546:	3b 81       	ldd	r19, Y+3	; 0x03
    2548:	2a 32       	cpi	r18, 0x2A	; 42
    254a:	31 05       	cpc	r19, r1
    254c:	c1 f6       	brne	.-80     	; 0x24fe <main+0x42>
		{
		case '*':
			APP_door();
    254e:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <APP_door>
    2552:	d5 cf       	rjmp	.-86     	; 0x24fe <main+0x42>
			break;
		case '#':
			APP_changePassword();
    2554:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <APP_changePassword>
    2558:	d2 cf       	rjmp	.-92     	; 0x24fe <main+0x42>

0000255a <APP_setPassword>:
		}
	}
}

void APP_setPassword()
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	ed 97       	sbiw	r28, 0x3d	; 61
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
	do
	{
		PasswordsMatched = TRUE;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	80 93 8e 01 	sts	0x018E, r24
		LCD_clearScreen();
    2574:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Enter New Pass: ");
    2578:	2f ea       	ldi	r18, 0xAF	; 175
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	a9 01       	movw	r20, r18
    2582:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	0e 94 4d 10 	call	0x209a	; 0x209a <LCD_moveCursor>
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
    258e:	1d ae       	std	Y+61, r1	; 0x3d
    2590:	8d c0       	rjmp	.+282    	; 0x26ac <APP_setPassword+0x152>
		{
			uint8 key = KEYPAD_getPressedKey();
    2592:	0e 94 10 11 	call	0x2220	; 0x2220 <KEYPAD_getPressedKey>
    2596:	8c af       	std	Y+60, r24	; 0x3c
			if(key >= '0' && key <= '9')
    2598:	8c ad       	ldd	r24, Y+60	; 0x3c
    259a:	80 33       	cpi	r24, 0x30	; 48
    259c:	78 f0       	brcs	.+30     	; 0x25bc <APP_setPassword+0x62>
    259e:	8c ad       	ldd	r24, Y+60	; 0x3c
    25a0:	8a 33       	cpi	r24, 0x3A	; 58
    25a2:	60 f4       	brcc	.+24     	; 0x25bc <APP_setPassword+0x62>
			{
				Password[i] = key;
    25a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25a6:	88 2f       	mov	r24, r24
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	fc 01       	movw	r30, r24
    25ac:	eb 55       	subi	r30, 0x5B	; 91
    25ae:	fe 4f       	sbci	r31, 0xFE	; 254
    25b0:	8c ad       	ldd	r24, Y+60	; 0x3c
    25b2:	80 83       	st	Z, r24
				LCD_displayCharacter(key);//LCD_displayCharacter('*');
    25b4:	8c ad       	ldd	r24, Y+60	; 0x3c
    25b6:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_displayCharacter>
    25ba:	03 c0       	rjmp	.+6      	; 0x25c2 <APP_setPassword+0x68>
			}
			else
			{
				i--;
    25bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    25be:	81 50       	subi	r24, 0x01	; 1
    25c0:	8d af       	std	Y+61, r24	; 0x3d
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	aa ef       	ldi	r26, 0xFA	; 250
    25c8:	b3 e4       	ldi	r27, 0x43	; 67
    25ca:	8d ab       	std	Y+53, r24	; 0x35
    25cc:	9e ab       	std	Y+54, r25	; 0x36
    25ce:	af ab       	std	Y+55, r26	; 0x37
    25d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d2:	6d a9       	ldd	r22, Y+53	; 0x35
    25d4:	7e a9       	ldd	r23, Y+54	; 0x36
    25d6:	8f a9       	ldd	r24, Y+55	; 0x37
    25d8:	98 ad       	ldd	r25, Y+56	; 0x38
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	4a ef       	ldi	r20, 0xFA	; 250
    25e0:	54 e4       	ldi	r21, 0x44	; 68
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	89 ab       	std	Y+49, r24	; 0x31
    25ec:	9a ab       	std	Y+50, r25	; 0x32
    25ee:	ab ab       	std	Y+51, r26	; 0x33
    25f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25f2:	69 a9       	ldd	r22, Y+49	; 0x31
    25f4:	7a a9       	ldd	r23, Y+50	; 0x32
    25f6:	8b a9       	ldd	r24, Y+51	; 0x33
    25f8:	9c a9       	ldd	r25, Y+52	; 0x34
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e8       	ldi	r20, 0x80	; 128
    2600:	5f e3       	ldi	r21, 0x3F	; 63
    2602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2606:	88 23       	and	r24, r24
    2608:	2c f4       	brge	.+10     	; 0x2614 <APP_setPassword+0xba>
		__ticks = 1;
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	98 ab       	std	Y+48, r25	; 0x30
    2610:	8f a7       	std	Y+47, r24	; 0x2f
    2612:	3f c0       	rjmp	.+126    	; 0x2692 <APP_setPassword+0x138>
	else if (__tmp > 65535)
    2614:	69 a9       	ldd	r22, Y+49	; 0x31
    2616:	7a a9       	ldd	r23, Y+50	; 0x32
    2618:	8b a9       	ldd	r24, Y+51	; 0x33
    261a:	9c a9       	ldd	r25, Y+52	; 0x34
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	3f ef       	ldi	r19, 0xFF	; 255
    2620:	4f e7       	ldi	r20, 0x7F	; 127
    2622:	57 e4       	ldi	r21, 0x47	; 71
    2624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2628:	18 16       	cp	r1, r24
    262a:	4c f5       	brge	.+82     	; 0x267e <APP_setPassword+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262c:	6d a9       	ldd	r22, Y+53	; 0x35
    262e:	7e a9       	ldd	r23, Y+54	; 0x36
    2630:	8f a9       	ldd	r24, Y+55	; 0x37
    2632:	98 ad       	ldd	r25, Y+56	; 0x38
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e2       	ldi	r20, 0x20	; 32
    263a:	51 e4       	ldi	r21, 0x41	; 65
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	98 ab       	std	Y+48, r25	; 0x30
    2652:	8f a7       	std	Y+47, r24	; 0x2f
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <APP_setPassword+0x11a>
    2656:	88 ec       	ldi	r24, 0xC8	; 200
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9e a7       	std	Y+46, r25	; 0x2e
    265c:	8d a7       	std	Y+45, r24	; 0x2d
    265e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2660:	9e a5       	ldd	r25, Y+46	; 0x2e
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <APP_setPassword+0x108>
    2666:	9e a7       	std	Y+46, r25	; 0x2e
    2668:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266a:	8f a5       	ldd	r24, Y+47	; 0x2f
    266c:	98 a9       	ldd	r25, Y+48	; 0x30
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	98 ab       	std	Y+48, r25	; 0x30
    2672:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2674:	8f a5       	ldd	r24, Y+47	; 0x2f
    2676:	98 a9       	ldd	r25, Y+48	; 0x30
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	69 f7       	brne	.-38     	; 0x2656 <APP_setPassword+0xfc>
    267c:	14 c0       	rjmp	.+40     	; 0x26a6 <APP_setPassword+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267e:	69 a9       	ldd	r22, Y+49	; 0x31
    2680:	7a a9       	ldd	r23, Y+50	; 0x32
    2682:	8b a9       	ldd	r24, Y+51	; 0x33
    2684:	9c a9       	ldd	r25, Y+52	; 0x34
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	98 ab       	std	Y+48, r25	; 0x30
    2690:	8f a7       	std	Y+47, r24	; 0x2f
    2692:	8f a5       	ldd	r24, Y+47	; 0x2f
    2694:	98 a9       	ldd	r25, Y+48	; 0x30
    2696:	9c a7       	std	Y+44, r25	; 0x2c
    2698:	8b a7       	std	Y+43, r24	; 0x2b
    269a:	8b a5       	ldd	r24, Y+43	; 0x2b
    269c:	9c a5       	ldd	r25, Y+44	; 0x2c
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <APP_setPassword+0x144>
    26a2:	9c a7       	std	Y+44, r25	; 0x2c
    26a4:	8b a7       	std	Y+43, r24	; 0x2b
	{
		PasswordsMatched = TRUE;
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "Enter New Pass: ");
		LCD_moveCursor(1, 0);
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
    26a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	8d af       	std	Y+61, r24	; 0x3d
    26ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	08 f4       	brcc	.+2      	; 0x26b4 <APP_setPassword+0x15a>
    26b2:	6f cf       	rjmp	.-290    	; 0x2592 <APP_setPassword+0x38>
			{
				i--;
			}
			_delay_ms(KEYPAD_DELAY);
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY);
    26b4:	0e 94 10 11 	call	0x2220	; 0x2220 <KEYPAD_getPressedKey>
    26b8:	81 34       	cpi	r24, 0x41	; 65
    26ba:	e1 f7       	brne	.-8      	; 0x26b4 <APP_setPassword+0x15a>

		LCD_clearScreen();
    26bc:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Enter Pass again");
    26c0:	20 ec       	ldi	r18, 0xC0	; 192
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	a9 01       	movw	r20, r18
    26ca:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	0e 94 4d 10 	call	0x209a	; 0x209a <LCD_moveCursor>
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
    26d6:	1b ae       	std	Y+59, r1	; 0x3b
    26d8:	8d c0       	rjmp	.+282    	; 0x27f4 <APP_setPassword+0x29a>
		{
			uint8 key = KEYPAD_getPressedKey();
    26da:	0e 94 10 11 	call	0x2220	; 0x2220 <KEYPAD_getPressedKey>
    26de:	8a af       	std	Y+58, r24	; 0x3a
			if(key >= '0' && key <= '9')
    26e0:	8a ad       	ldd	r24, Y+58	; 0x3a
    26e2:	80 33       	cpi	r24, 0x30	; 48
    26e4:	78 f0       	brcs	.+30     	; 0x2704 <APP_setPassword+0x1aa>
    26e6:	8a ad       	ldd	r24, Y+58	; 0x3a
    26e8:	8a 33       	cpi	r24, 0x3A	; 58
    26ea:	60 f4       	brcc	.+24     	; 0x2704 <APP_setPassword+0x1aa>
			{
				Password2[i] = key;
    26ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	fc 01       	movw	r30, r24
    26f4:	e1 57       	subi	r30, 0x71	; 113
    26f6:	fe 4f       	sbci	r31, 0xFE	; 254
    26f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    26fa:	80 83       	st	Z, r24
				LCD_displayCharacter(key);//LCD_displayCharacter('*');
    26fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    26fe:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_displayCharacter>
    2702:	03 c0       	rjmp	.+6      	; 0x270a <APP_setPassword+0x1b0>
			}
			else
			{
				i--;
    2704:	8b ad       	ldd	r24, Y+59	; 0x3b
    2706:	81 50       	subi	r24, 0x01	; 1
    2708:	8b af       	std	Y+59, r24	; 0x3b
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	aa ef       	ldi	r26, 0xFA	; 250
    2710:	b3 e4       	ldi	r27, 0x43	; 67
    2712:	8f a3       	std	Y+39, r24	; 0x27
    2714:	98 a7       	std	Y+40, r25	; 0x28
    2716:	a9 a7       	std	Y+41, r26	; 0x29
    2718:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271a:	6f a1       	ldd	r22, Y+39	; 0x27
    271c:	78 a5       	ldd	r23, Y+40	; 0x28
    271e:	89 a5       	ldd	r24, Y+41	; 0x29
    2720:	9a a5       	ldd	r25, Y+42	; 0x2a
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	4a ef       	ldi	r20, 0xFA	; 250
    2728:	54 e4       	ldi	r21, 0x44	; 68
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8b a3       	std	Y+35, r24	; 0x23
    2734:	9c a3       	std	Y+36, r25	; 0x24
    2736:	ad a3       	std	Y+37, r26	; 0x25
    2738:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    273a:	6b a1       	ldd	r22, Y+35	; 0x23
    273c:	7c a1       	ldd	r23, Y+36	; 0x24
    273e:	8d a1       	ldd	r24, Y+37	; 0x25
    2740:	9e a1       	ldd	r25, Y+38	; 0x26
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274e:	88 23       	and	r24, r24
    2750:	2c f4       	brge	.+10     	; 0x275c <APP_setPassword+0x202>
		__ticks = 1;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	9a a3       	std	Y+34, r25	; 0x22
    2758:	89 a3       	std	Y+33, r24	; 0x21
    275a:	3f c0       	rjmp	.+126    	; 0x27da <APP_setPassword+0x280>
	else if (__tmp > 65535)
    275c:	6b a1       	ldd	r22, Y+35	; 0x23
    275e:	7c a1       	ldd	r23, Y+36	; 0x24
    2760:	8d a1       	ldd	r24, Y+37	; 0x25
    2762:	9e a1       	ldd	r25, Y+38	; 0x26
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	3f ef       	ldi	r19, 0xFF	; 255
    2768:	4f e7       	ldi	r20, 0x7F	; 127
    276a:	57 e4       	ldi	r21, 0x47	; 71
    276c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2770:	18 16       	cp	r1, r24
    2772:	4c f5       	brge	.+82     	; 0x27c6 <APP_setPassword+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2774:	6f a1       	ldd	r22, Y+39	; 0x27
    2776:	78 a5       	ldd	r23, Y+40	; 0x28
    2778:	89 a5       	ldd	r24, Y+41	; 0x29
    277a:	9a a5       	ldd	r25, Y+42	; 0x2a
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e2       	ldi	r20, 0x20	; 32
    2782:	51 e4       	ldi	r21, 0x41	; 65
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	bc 01       	movw	r22, r24
    278e:	cd 01       	movw	r24, r26
    2790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	9a a3       	std	Y+34, r25	; 0x22
    279a:	89 a3       	std	Y+33, r24	; 0x21
    279c:	0f c0       	rjmp	.+30     	; 0x27bc <APP_setPassword+0x262>
    279e:	88 ec       	ldi	r24, 0xC8	; 200
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	98 a3       	std	Y+32, r25	; 0x20
    27a4:	8f 8f       	std	Y+31, r24	; 0x1f
    27a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27a8:	98 a1       	ldd	r25, Y+32	; 0x20
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <APP_setPassword+0x250>
    27ae:	98 a3       	std	Y+32, r25	; 0x20
    27b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b2:	89 a1       	ldd	r24, Y+33	; 0x21
    27b4:	9a a1       	ldd	r25, Y+34	; 0x22
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	9a a3       	std	Y+34, r25	; 0x22
    27ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27bc:	89 a1       	ldd	r24, Y+33	; 0x21
    27be:	9a a1       	ldd	r25, Y+34	; 0x22
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	69 f7       	brne	.-38     	; 0x279e <APP_setPassword+0x244>
    27c4:	14 c0       	rjmp	.+40     	; 0x27ee <APP_setPassword+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c6:	6b a1       	ldd	r22, Y+35	; 0x23
    27c8:	7c a1       	ldd	r23, Y+36	; 0x24
    27ca:	8d a1       	ldd	r24, Y+37	; 0x25
    27cc:	9e a1       	ldd	r25, Y+38	; 0x26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9a a3       	std	Y+34, r25	; 0x22
    27d8:	89 a3       	std	Y+33, r24	; 0x21
    27da:	89 a1       	ldd	r24, Y+33	; 0x21
    27dc:	9a a1       	ldd	r25, Y+34	; 0x22
    27de:	9e 8f       	std	Y+30, r25	; 0x1e
    27e0:	8d 8f       	std	Y+29, r24	; 0x1d
    27e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <APP_setPassword+0x28c>
    27ea:	9e 8f       	std	Y+30, r25	; 0x1e
    27ec:	8d 8f       	std	Y+29, r24	; 0x1d
		while(KEYPAD_getPressedKey() != ENTER_KEY);

		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "Enter Pass again");
		LCD_moveCursor(1, 0);
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
    27ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    27f0:	8f 5f       	subi	r24, 0xFF	; 255
    27f2:	8b af       	std	Y+59, r24	; 0x3b
    27f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    27f6:	82 30       	cpi	r24, 0x02	; 2
    27f8:	08 f4       	brcc	.+2      	; 0x27fc <APP_setPassword+0x2a2>
    27fa:	6f cf       	rjmp	.-290    	; 0x26da <APP_setPassword+0x180>
			{
				i--;
			}
			_delay_ms(KEYPAD_DELAY);
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY);
    27fc:	0e 94 10 11 	call	0x2220	; 0x2220 <KEYPAD_getPressedKey>
    2800:	81 34       	cpi	r24, 0x41	; 65
    2802:	e1 f7       	brne	.-8      	; 0x27fc <APP_setPassword+0x2a2>

		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
    2804:	19 ae       	std	Y+57, r1	; 0x39
    2806:	99 c0       	rjmp	.+306    	; 0x293a <APP_setPassword+0x3e0>
		{
			if(Password[i] != Password2[i])
    2808:	89 ad       	ldd	r24, Y+57	; 0x39
    280a:	88 2f       	mov	r24, r24
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	fc 01       	movw	r30, r24
    2810:	eb 55       	subi	r30, 0x5B	; 91
    2812:	fe 4f       	sbci	r31, 0xFE	; 254
    2814:	20 81       	ld	r18, Z
    2816:	89 ad       	ldd	r24, Y+57	; 0x39
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	fc 01       	movw	r30, r24
    281e:	e1 57       	subi	r30, 0x71	; 113
    2820:	fe 4f       	sbci	r31, 0xFE	; 254
    2822:	80 81       	ld	r24, Z
    2824:	28 17       	cp	r18, r24
    2826:	09 f4       	brne	.+2      	; 0x282a <APP_setPassword+0x2d0>
    2828:	85 c0       	rjmp	.+266    	; 0x2934 <APP_setPassword+0x3da>
			{
				PasswordsMatched = FALSE;
    282a:	10 92 8e 01 	sts	0x018E, r1
				LCD_clearScreen();
    282e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 3, "UnMatched");
    2832:	21 ed       	ldi	r18, 0xD1	; 209
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	63 e0       	ldi	r22, 0x03	; 3
    283a:	a9 01       	movw	r20, r18
    283c:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "Try again");
    2840:	2b ed       	ldi	r18, 0xDB	; 219
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	a9 01       	movw	r20, r18
    284a:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	aa e7       	ldi	r26, 0x7A	; 122
    2854:	b4 e4       	ldi	r27, 0x44	; 68
    2856:	89 8f       	std	Y+25, r24	; 0x19
    2858:	9a 8f       	std	Y+26, r25	; 0x1a
    285a:	ab 8f       	std	Y+27, r26	; 0x1b
    285c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285e:	69 8d       	ldd	r22, Y+25	; 0x19
    2860:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2862:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2864:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	4a ef       	ldi	r20, 0xFA	; 250
    286c:	54 e4       	ldi	r21, 0x44	; 68
    286e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	8d 8b       	std	Y+21, r24	; 0x15
    2878:	9e 8b       	std	Y+22, r25	; 0x16
    287a:	af 8b       	std	Y+23, r26	; 0x17
    287c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    287e:	6d 89       	ldd	r22, Y+21	; 0x15
    2880:	7e 89       	ldd	r23, Y+22	; 0x16
    2882:	8f 89       	ldd	r24, Y+23	; 0x17
    2884:	98 8d       	ldd	r25, Y+24	; 0x18
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e8       	ldi	r20, 0x80	; 128
    288c:	5f e3       	ldi	r21, 0x3F	; 63
    288e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2892:	88 23       	and	r24, r24
    2894:	2c f4       	brge	.+10     	; 0x28a0 <APP_setPassword+0x346>
		__ticks = 1;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	9c 8b       	std	Y+20, r25	; 0x14
    289c:	8b 8b       	std	Y+19, r24	; 0x13
    289e:	3f c0       	rjmp	.+126    	; 0x291e <APP_setPassword+0x3c4>
	else if (__tmp > 65535)
    28a0:	6d 89       	ldd	r22, Y+21	; 0x15
    28a2:	7e 89       	ldd	r23, Y+22	; 0x16
    28a4:	8f 89       	ldd	r24, Y+23	; 0x17
    28a6:	98 8d       	ldd	r25, Y+24	; 0x18
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	3f ef       	ldi	r19, 0xFF	; 255
    28ac:	4f e7       	ldi	r20, 0x7F	; 127
    28ae:	57 e4       	ldi	r21, 0x47	; 71
    28b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b4:	18 16       	cp	r1, r24
    28b6:	4c f5       	brge	.+82     	; 0x290a <APP_setPassword+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e2       	ldi	r20, 0x20	; 32
    28c6:	51 e4       	ldi	r21, 0x41	; 65
    28c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	9c 8b       	std	Y+20, r25	; 0x14
    28de:	8b 8b       	std	Y+19, r24	; 0x13
    28e0:	0f c0       	rjmp	.+30     	; 0x2900 <APP_setPassword+0x3a6>
    28e2:	88 ec       	ldi	r24, 0xC8	; 200
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9a 8b       	std	Y+18, r25	; 0x12
    28e8:	89 8b       	std	Y+17, r24	; 0x11
    28ea:	89 89       	ldd	r24, Y+17	; 0x11
    28ec:	9a 89       	ldd	r25, Y+18	; 0x12
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <APP_setPassword+0x394>
    28f2:	9a 8b       	std	Y+18, r25	; 0x12
    28f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f6:	8b 89       	ldd	r24, Y+19	; 0x13
    28f8:	9c 89       	ldd	r25, Y+20	; 0x14
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	9c 8b       	std	Y+20, r25	; 0x14
    28fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2900:	8b 89       	ldd	r24, Y+19	; 0x13
    2902:	9c 89       	ldd	r25, Y+20	; 0x14
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	69 f7       	brne	.-38     	; 0x28e2 <APP_setPassword+0x388>
    2908:	1c c0       	rjmp	.+56     	; 0x2942 <APP_setPassword+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290a:	6d 89       	ldd	r22, Y+21	; 0x15
    290c:	7e 89       	ldd	r23, Y+22	; 0x16
    290e:	8f 89       	ldd	r24, Y+23	; 0x17
    2910:	98 8d       	ldd	r25, Y+24	; 0x18
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	9c 8b       	std	Y+20, r25	; 0x14
    291c:	8b 8b       	std	Y+19, r24	; 0x13
    291e:	8b 89       	ldd	r24, Y+19	; 0x13
    2920:	9c 89       	ldd	r25, Y+20	; 0x14
    2922:	98 8b       	std	Y+16, r25	; 0x10
    2924:	8f 87       	std	Y+15, r24	; 0x0f
    2926:	8f 85       	ldd	r24, Y+15	; 0x0f
    2928:	98 89       	ldd	r25, Y+16	; 0x10
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <APP_setPassword+0x3d0>
    292e:	98 8b       	std	Y+16, r25	; 0x10
    2930:	8f 87       	std	Y+15, r24	; 0x0f
    2932:	07 c0       	rjmp	.+14     	; 0x2942 <APP_setPassword+0x3e8>
			}
			_delay_ms(KEYPAD_DELAY);
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY);

		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
    2934:	89 ad       	ldd	r24, Y+57	; 0x39
    2936:	8f 5f       	subi	r24, 0xFF	; 255
    2938:	89 af       	std	Y+57, r24	; 0x39
    293a:	89 ad       	ldd	r24, Y+57	; 0x39
    293c:	82 30       	cpi	r24, 0x02	; 2
    293e:	08 f4       	brcc	.+2      	; 0x2942 <APP_setPassword+0x3e8>
    2940:	63 cf       	rjmp	.-314    	; 0x2808 <APP_setPassword+0x2ae>
				LCD_displayStringRowColumn(1, 0, "Try again");
				_delay_ms(1000);
				break;
			}
		}
	}while(PasswordsMatched == FALSE);
    2942:	80 91 8e 01 	lds	r24, 0x018E
    2946:	88 23       	and	r24, r24
    2948:	09 f4       	brne	.+2      	; 0x294c <APP_setPassword+0x3f2>
    294a:	11 ce       	rjmp	.-990    	; 0x256e <APP_setPassword+0x14>
	LCD_clearScreen();
    294c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 3, "Matched");
    2950:	25 ee       	ldi	r18, 0xE5	; 229
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	63 e0       	ldi	r22, 0x03	; 3
    2958:	a9 01       	movw	r20, r18
    295a:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Password Saved");
    295e:	2d ee       	ldi	r18, 0xED	; 237
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	a9 01       	movw	r20, r18
    2968:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	aa e7       	ldi	r26, 0x7A	; 122
    2972:	b4 e4       	ldi	r27, 0x44	; 68
    2974:	8b 87       	std	Y+11, r24	; 0x0b
    2976:	9c 87       	std	Y+12, r25	; 0x0c
    2978:	ad 87       	std	Y+13, r26	; 0x0d
    297a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	6b 85       	ldd	r22, Y+11	; 0x0b
    297e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2980:	8d 85       	ldd	r24, Y+13	; 0x0d
    2982:	9e 85       	ldd	r25, Y+14	; 0x0e
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	4a ef       	ldi	r20, 0xFA	; 250
    298a:	54 e4       	ldi	r21, 0x44	; 68
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8f 83       	std	Y+7, r24	; 0x07
    2996:	98 87       	std	Y+8, r25	; 0x08
    2998:	a9 87       	std	Y+9, r26	; 0x09
    299a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    299c:	6f 81       	ldd	r22, Y+7	; 0x07
    299e:	78 85       	ldd	r23, Y+8	; 0x08
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <APP_setPassword+0x464>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <APP_setPassword+0x4e2>
	else if (__tmp > 65535)
    29be:	6f 81       	ldd	r22, Y+7	; 0x07
    29c0:	78 85       	ldd	r23, Y+8	; 0x08
    29c2:	89 85       	ldd	r24, Y+9	; 0x09
    29c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <APP_setPassword+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29da:	8d 85       	ldd	r24, Y+13	; 0x0d
    29dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <APP_setPassword+0x4c4>
    2a00:	88 ec       	ldi	r24, 0xC8	; 200
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9c 83       	std	Y+4, r25	; 0x04
    2a06:	8b 83       	std	Y+3, r24	; 0x03
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <APP_setPassword+0x4b2>
    2a10:	9c 83       	std	Y+4, r25	; 0x04
    2a12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <APP_setPassword+0x4a6>
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <APP_setPassword+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2a:	78 85       	ldd	r23, Y+8	; 0x08
    2a2c:	89 85       	ldd	r24, Y+9	; 0x09
    2a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <APP_setPassword+0x4ee>
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	eeprom_write_block(Password,PasswordAddress,PASSWORD_SIZE);
    2a50:	85 ea       	ldi	r24, 0xA5	; 165
    2a52:	91 e0       	ldi	r25, 0x01	; 1
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	70 e0       	ldi	r23, 0x00	; 0
    2a58:	42 e0       	ldi	r20, 0x02	; 2
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__eewr_block_m32>
	eeprom_write_byte(PasswordFlagAddress,PasswordIsSet);
    2a60:	80 e1       	ldi	r24, 0x10	; 16
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	63 ec       	ldi	r22, 0xC3	; 195
    2a66:	0e 94 76 18 	call	0x30ec	; 0x30ec <__eewr_byte_m32>
}
    2a6a:	ed 96       	adiw	r28, 0x3d	; 61
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <APP_updatePassword>:

void APP_updatePassword()
{
    2a7c:	0f 93       	push	r16
    2a7e:	1f 93       	push	r17
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <APP_updatePassword+0xa>
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0 ; i < PASSWORD_SIZE ; i++)
    2a8a:	1a 82       	std	Y+2, r1	; 0x02
    2a8c:	19 82       	std	Y+1, r1	; 0x01
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <APP_updatePassword+0x32>
	{
		Password[i] = eeprom_read_byte(PasswordAddress+i);
    2a90:	09 81       	ldd	r16, Y+1	; 0x01
    2a92:	1a 81       	ldd	r17, Y+2	; 0x02
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__eerd_byte_m32>
    2a9c:	f8 01       	movw	r30, r16
    2a9e:	eb 55       	subi	r30, 0x5B	; 91
    2aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    2aa2:	80 83       	st	Z, r24
	eeprom_write_byte(PasswordFlagAddress,PasswordIsSet);
}

void APP_updatePassword()
{
	for(int i = 0 ; i < PASSWORD_SIZE ; i++)
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab2:	82 30       	cpi	r24, 0x02	; 2
    2ab4:	91 05       	cpc	r25, r1
    2ab6:	64 f3       	brlt	.-40     	; 0x2a90 <APP_updatePassword+0x14>
	{
		Password[i] = eeprom_read_byte(PasswordAddress+i);
	}
}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	08 95       	ret

00002ac6 <APP_checkPassword>:

uint8 APP_checkPassword()
{
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	af 97       	sbiw	r28, 0x2f	; 47
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
	APP_updatePassword();
    2ada:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <APP_updatePassword>
	uint8 Lives = TRIES_ALLOWED;
    2ade:	83 e0       	ldi	r24, 0x03	; 3
    2ae0:	8e a7       	std	Y+46, r24	; 0x2e
	do
	{
		LCD_clearScreen();
    2ae2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass");
    2ae6:	8c ef       	ldi	r24, 0xFC	; 252
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_displayString>
		PasswordsMatched = TRUE;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	80 93 8e 01 	sts	0x018E, r24
		LCD_moveCursor(1, 0);
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	0e 94 4d 10 	call	0x209a	; 0x209a <LCD_moveCursor>
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
    2afc:	1d a6       	std	Y+45, r1	; 0x2d
    2afe:	8d c0       	rjmp	.+282    	; 0x2c1a <APP_checkPassword+0x154>
		{
			uint8 key = KEYPAD_getPressedKey();
    2b00:	0e 94 10 11 	call	0x2220	; 0x2220 <KEYPAD_getPressedKey>
    2b04:	8c a7       	std	Y+44, r24	; 0x2c
			if(key >= '0' && key <= '9')
    2b06:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b08:	80 33       	cpi	r24, 0x30	; 48
    2b0a:	78 f0       	brcs	.+30     	; 0x2b2a <APP_checkPassword+0x64>
    2b0c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b0e:	8a 33       	cpi	r24, 0x3A	; 58
    2b10:	60 f4       	brcc	.+24     	; 0x2b2a <APP_checkPassword+0x64>
			{
				Password2[i] = key;
    2b12:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	fc 01       	movw	r30, r24
    2b1a:	e1 57       	subi	r30, 0x71	; 113
    2b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b1e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b20:	80 83       	st	Z, r24
				LCD_displayCharacter(key);//LCD_displayCharacter('*');
    2b22:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b24:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_displayCharacter>
    2b28:	03 c0       	rjmp	.+6      	; 0x2b30 <APP_checkPassword+0x6a>
			}
			else
			{
				i--;
    2b2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b2c:	81 50       	subi	r24, 0x01	; 1
    2b2e:	8d a7       	std	Y+45, r24	; 0x2d
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	aa ef       	ldi	r26, 0xFA	; 250
    2b36:	b3 e4       	ldi	r27, 0x43	; 67
    2b38:	8f a3       	std	Y+39, r24	; 0x27
    2b3a:	98 a7       	std	Y+40, r25	; 0x28
    2b3c:	a9 a7       	std	Y+41, r26	; 0x29
    2b3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b40:	6f a1       	ldd	r22, Y+39	; 0x27
    2b42:	78 a5       	ldd	r23, Y+40	; 0x28
    2b44:	89 a5       	ldd	r24, Y+41	; 0x29
    2b46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	4a ef       	ldi	r20, 0xFA	; 250
    2b4e:	54 e4       	ldi	r21, 0x44	; 68
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	8b a3       	std	Y+35, r24	; 0x23
    2b5a:	9c a3       	std	Y+36, r25	; 0x24
    2b5c:	ad a3       	std	Y+37, r26	; 0x25
    2b5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b60:	6b a1       	ldd	r22, Y+35	; 0x23
    2b62:	7c a1       	ldd	r23, Y+36	; 0x24
    2b64:	8d a1       	ldd	r24, Y+37	; 0x25
    2b66:	9e a1       	ldd	r25, Y+38	; 0x26
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e8       	ldi	r20, 0x80	; 128
    2b6e:	5f e3       	ldi	r21, 0x3F	; 63
    2b70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b74:	88 23       	and	r24, r24
    2b76:	2c f4       	brge	.+10     	; 0x2b82 <APP_checkPassword+0xbc>
		__ticks = 1;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	9a a3       	std	Y+34, r25	; 0x22
    2b7e:	89 a3       	std	Y+33, r24	; 0x21
    2b80:	3f c0       	rjmp	.+126    	; 0x2c00 <APP_checkPassword+0x13a>
	else if (__tmp > 65535)
    2b82:	6b a1       	ldd	r22, Y+35	; 0x23
    2b84:	7c a1       	ldd	r23, Y+36	; 0x24
    2b86:	8d a1       	ldd	r24, Y+37	; 0x25
    2b88:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	3f ef       	ldi	r19, 0xFF	; 255
    2b8e:	4f e7       	ldi	r20, 0x7F	; 127
    2b90:	57 e4       	ldi	r21, 0x47	; 71
    2b92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b96:	18 16       	cp	r1, r24
    2b98:	4c f5       	brge	.+82     	; 0x2bec <APP_checkPassword+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e2       	ldi	r20, 0x20	; 32
    2ba8:	51 e4       	ldi	r21, 0x41	; 65
    2baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9a a3       	std	Y+34, r25	; 0x22
    2bc0:	89 a3       	std	Y+33, r24	; 0x21
    2bc2:	0f c0       	rjmp	.+30     	; 0x2be2 <APP_checkPassword+0x11c>
    2bc4:	88 ec       	ldi	r24, 0xC8	; 200
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	98 a3       	std	Y+32, r25	; 0x20
    2bca:	8f 8f       	std	Y+31, r24	; 0x1f
    2bcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bce:	98 a1       	ldd	r25, Y+32	; 0x20
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	f1 f7       	brne	.-4      	; 0x2bd0 <APP_checkPassword+0x10a>
    2bd4:	98 a3       	std	Y+32, r25	; 0x20
    2bd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bda:	9a a1       	ldd	r25, Y+34	; 0x22
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	9a a3       	std	Y+34, r25	; 0x22
    2be0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be2:	89 a1       	ldd	r24, Y+33	; 0x21
    2be4:	9a a1       	ldd	r25, Y+34	; 0x22
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	69 f7       	brne	.-38     	; 0x2bc4 <APP_checkPassword+0xfe>
    2bea:	14 c0       	rjmp	.+40     	; 0x2c14 <APP_checkPassword+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bec:	6b a1       	ldd	r22, Y+35	; 0x23
    2bee:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	9a a3       	std	Y+34, r25	; 0x22
    2bfe:	89 a3       	std	Y+33, r24	; 0x21
    2c00:	89 a1       	ldd	r24, Y+33	; 0x21
    2c02:	9a a1       	ldd	r25, Y+34	; 0x22
    2c04:	9e 8f       	std	Y+30, r25	; 0x1e
    2c06:	8d 8f       	std	Y+29, r24	; 0x1d
    2c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <APP_checkPassword+0x146>
    2c10:	9e 8f       	std	Y+30, r25	; 0x1e
    2c12:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		LCD_clearScreen();
		LCD_displayString("Plz Enter Pass");
		PasswordsMatched = TRUE;
		LCD_moveCursor(1, 0);
		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
    2c14:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c16:	8f 5f       	subi	r24, 0xFF	; 255
    2c18:	8d a7       	std	Y+45, r24	; 0x2d
    2c1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c1c:	82 30       	cpi	r24, 0x02	; 2
    2c1e:	08 f4       	brcc	.+2      	; 0x2c22 <APP_checkPassword+0x15c>
    2c20:	6f cf       	rjmp	.-290    	; 0x2b00 <APP_checkPassword+0x3a>
			{
				i--;
			}
			_delay_ms(KEYPAD_DELAY);
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY);
    2c22:	0e 94 10 11 	call	0x2220	; 0x2220 <KEYPAD_getPressedKey>
    2c26:	81 34       	cpi	r24, 0x41	; 65
    2c28:	e1 f7       	brne	.-8      	; 0x2c22 <APP_checkPassword+0x15c>

		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
    2c2a:	1b a6       	std	Y+43, r1	; 0x2b
    2c2c:	a1 c0       	rjmp	.+322    	; 0x2d70 <APP_checkPassword+0x2aa>
		{
			if(Password[i] != Password2[i])
    2c2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	fc 01       	movw	r30, r24
    2c36:	eb 55       	subi	r30, 0x5B	; 91
    2c38:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3a:	20 81       	ld	r18, Z
    2c3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c3e:	88 2f       	mov	r24, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	fc 01       	movw	r30, r24
    2c44:	e1 57       	subi	r30, 0x71	; 113
    2c46:	fe 4f       	sbci	r31, 0xFE	; 254
    2c48:	80 81       	ld	r24, Z
    2c4a:	28 17       	cp	r18, r24
    2c4c:	09 f4       	brne	.+2      	; 0x2c50 <APP_checkPassword+0x18a>
    2c4e:	8d c0       	rjmp	.+282    	; 0x2d6a <APP_checkPassword+0x2a4>
			{
				PasswordsMatched = FALSE;
    2c50:	10 92 8e 01 	sts	0x018E, r1
				Lives--;
    2c54:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c56:	81 50       	subi	r24, 0x01	; 1
    2c58:	8e a7       	std	Y+46, r24	; 0x2e
				LCD_clearScreen();
    2c5a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 3, "UnMatched");
    2c5e:	21 ed       	ldi	r18, 0xD1	; 209
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	63 e0       	ldi	r22, 0x03	; 3
    2c66:	a9 01       	movw	r20, r18
    2c68:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "Tires Left = ");
    2c6c:	2b e0       	ldi	r18, 0x0B	; 11
    2c6e:	31 e0       	ldi	r19, 0x01	; 1
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	a9 01       	movw	r20, r18
    2c76:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
				LCD_intgerToString(Lives);
    2c7a:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c7c:	88 2f       	mov	r24, r24
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_intgerToString>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	aa e7       	ldi	r26, 0x7A	; 122
    2c8a:	b4 e4       	ldi	r27, 0x44	; 68
    2c8c:	89 8f       	std	Y+25, r24	; 0x19
    2c8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c90:	ab 8f       	std	Y+27, r26	; 0x1b
    2c92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c94:	69 8d       	ldd	r22, Y+25	; 0x19
    2c96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	4a ef       	ldi	r20, 0xFA	; 250
    2ca2:	54 e4       	ldi	r21, 0x44	; 68
    2ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	8d 8b       	std	Y+21, r24	; 0x15
    2cae:	9e 8b       	std	Y+22, r25	; 0x16
    2cb0:	af 8b       	std	Y+23, r26	; 0x17
    2cb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cba:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e8       	ldi	r20, 0x80	; 128
    2cc2:	5f e3       	ldi	r21, 0x3F	; 63
    2cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cc8:	88 23       	and	r24, r24
    2cca:	2c f4       	brge	.+10     	; 0x2cd6 <APP_checkPassword+0x210>
		__ticks = 1;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9c 8b       	std	Y+20, r25	; 0x14
    2cd2:	8b 8b       	std	Y+19, r24	; 0x13
    2cd4:	3f c0       	rjmp	.+126    	; 0x2d54 <APP_checkPassword+0x28e>
	else if (__tmp > 65535)
    2cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cda:	8f 89       	ldd	r24, Y+23	; 0x17
    2cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	3f ef       	ldi	r19, 0xFF	; 255
    2ce2:	4f e7       	ldi	r20, 0x7F	; 127
    2ce4:	57 e4       	ldi	r21, 0x47	; 71
    2ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cea:	18 16       	cp	r1, r24
    2cec:	4c f5       	brge	.+82     	; 0x2d40 <APP_checkPassword+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cee:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e2       	ldi	r20, 0x20	; 32
    2cfc:	51 e4       	ldi	r21, 0x41	; 65
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	9c 8b       	std	Y+20, r25	; 0x14
    2d14:	8b 8b       	std	Y+19, r24	; 0x13
    2d16:	0f c0       	rjmp	.+30     	; 0x2d36 <APP_checkPassword+0x270>
    2d18:	88 ec       	ldi	r24, 0xC8	; 200
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9a 8b       	std	Y+18, r25	; 0x12
    2d1e:	89 8b       	std	Y+17, r24	; 0x11
    2d20:	89 89       	ldd	r24, Y+17	; 0x11
    2d22:	9a 89       	ldd	r25, Y+18	; 0x12
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <APP_checkPassword+0x25e>
    2d28:	9a 8b       	std	Y+18, r25	; 0x12
    2d2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	9c 8b       	std	Y+20, r25	; 0x14
    2d34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d36:	8b 89       	ldd	r24, Y+19	; 0x13
    2d38:	9c 89       	ldd	r25, Y+20	; 0x14
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	69 f7       	brne	.-38     	; 0x2d18 <APP_checkPassword+0x252>
    2d3e:	1c c0       	rjmp	.+56     	; 0x2d78 <APP_checkPassword+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d40:	6d 89       	ldd	r22, Y+21	; 0x15
    2d42:	7e 89       	ldd	r23, Y+22	; 0x16
    2d44:	8f 89       	ldd	r24, Y+23	; 0x17
    2d46:	98 8d       	ldd	r25, Y+24	; 0x18
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9c 8b       	std	Y+20, r25	; 0x14
    2d52:	8b 8b       	std	Y+19, r24	; 0x13
    2d54:	8b 89       	ldd	r24, Y+19	; 0x13
    2d56:	9c 89       	ldd	r25, Y+20	; 0x14
    2d58:	98 8b       	std	Y+16, r25	; 0x10
    2d5a:	8f 87       	std	Y+15, r24	; 0x0f
    2d5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d5e:	98 89       	ldd	r25, Y+16	; 0x10
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <APP_checkPassword+0x29a>
    2d64:	98 8b       	std	Y+16, r25	; 0x10
    2d66:	8f 87       	std	Y+15, r24	; 0x0f
    2d68:	07 c0       	rjmp	.+14     	; 0x2d78 <APP_checkPassword+0x2b2>
			}
			_delay_ms(KEYPAD_DELAY);
		}
		while(KEYPAD_getPressedKey() != ENTER_KEY);

		for(uint8 i = 0 ; i < PASSWORD_SIZE ; i++)
    2d6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d6c:	8f 5f       	subi	r24, 0xFF	; 255
    2d6e:	8b a7       	std	Y+43, r24	; 0x2b
    2d70:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d72:	82 30       	cpi	r24, 0x02	; 2
    2d74:	08 f4       	brcc	.+2      	; 0x2d78 <APP_checkPassword+0x2b2>
    2d76:	5b cf       	rjmp	.-330    	; 0x2c2e <APP_checkPassword+0x168>
				LCD_intgerToString(Lives);
				_delay_ms(1000);
				break;
			}
		}
		if(PasswordsMatched == TRUE)
    2d78:	80 91 8e 01 	lds	r24, 0x018E
    2d7c:	81 30       	cpi	r24, 0x01	; 1
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <APP_checkPassword+0x2bc>
    2d80:	7e c0       	rjmp	.+252    	; 0x2e7e <APP_checkPassword+0x3b8>
		{
			LCD_clearScreen();
    2d82:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 3, "Matched");
    2d86:	25 ee       	ldi	r18, 0xE5	; 229
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	63 e0       	ldi	r22, 0x03	; 3
    2d8e:	a9 01       	movw	r20, r18
    2d90:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	aa e7       	ldi	r26, 0x7A	; 122
    2d9a:	b4 e4       	ldi	r27, 0x44	; 68
    2d9c:	8b 87       	std	Y+11, r24	; 0x0b
    2d9e:	9c 87       	std	Y+12, r25	; 0x0c
    2da0:	ad 87       	std	Y+13, r26	; 0x0d
    2da2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	4a ef       	ldi	r20, 0xFA	; 250
    2db2:	54 e4       	ldi	r21, 0x44	; 68
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	8f 83       	std	Y+7, r24	; 0x07
    2dbe:	98 87       	std	Y+8, r25	; 0x08
    2dc0:	a9 87       	std	Y+9, r26	; 0x09
    2dc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc6:	78 85       	ldd	r23, Y+8	; 0x08
    2dc8:	89 85       	ldd	r24, Y+9	; 0x09
    2dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e8       	ldi	r20, 0x80	; 128
    2dd2:	5f e3       	ldi	r21, 0x3F	; 63
    2dd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd8:	88 23       	and	r24, r24
    2dda:	2c f4       	brge	.+10     	; 0x2de6 <APP_checkPassword+0x320>
		__ticks = 1;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	9e 83       	std	Y+6, r25	; 0x06
    2de2:	8d 83       	std	Y+5, r24	; 0x05
    2de4:	3f c0       	rjmp	.+126    	; 0x2e64 <APP_checkPassword+0x39e>
	else if (__tmp > 65535)
    2de6:	6f 81       	ldd	r22, Y+7	; 0x07
    2de8:	78 85       	ldd	r23, Y+8	; 0x08
    2dea:	89 85       	ldd	r24, Y+9	; 0x09
    2dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	3f ef       	ldi	r19, 0xFF	; 255
    2df2:	4f e7       	ldi	r20, 0x7F	; 127
    2df4:	57 e4       	ldi	r21, 0x47	; 71
    2df6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dfa:	18 16       	cp	r1, r24
    2dfc:	4c f5       	brge	.+82     	; 0x2e50 <APP_checkPassword+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e2       	ldi	r20, 0x20	; 32
    2e0c:	51 e4       	ldi	r21, 0x41	; 65
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	bc 01       	movw	r22, r24
    2e18:	cd 01       	movw	r24, r26
    2e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
    2e26:	0f c0       	rjmp	.+30     	; 0x2e46 <APP_checkPassword+0x380>
    2e28:	88 ec       	ldi	r24, 0xC8	; 200
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	9c 83       	std	Y+4, r25	; 0x04
    2e2e:	8b 83       	std	Y+3, r24	; 0x03
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	9c 81       	ldd	r25, Y+4	; 0x04
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <APP_checkPassword+0x36e>
    2e38:	9c 83       	std	Y+4, r25	; 0x04
    2e3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	9e 83       	std	Y+6, r25	; 0x06
    2e44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	69 f7       	brne	.-38     	; 0x2e28 <APP_checkPassword+0x362>
    2e4e:	14 c0       	rjmp	.+40     	; 0x2e78 <APP_checkPassword+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e50:	6f 81       	ldd	r22, Y+7	; 0x07
    2e52:	78 85       	ldd	r23, Y+8	; 0x08
    2e54:	89 85       	ldd	r24, Y+9	; 0x09
    2e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	9e 83       	std	Y+6, r25	; 0x06
    2e62:	8d 83       	std	Y+5, r24	; 0x05
    2e64:	8d 81       	ldd	r24, Y+5	; 0x05
    2e66:	9e 81       	ldd	r25, Y+6	; 0x06
    2e68:	9a 83       	std	Y+2, r25	; 0x02
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <APP_checkPassword+0x3aa>
    2e74:	9a 83       	std	Y+2, r25	; 0x02
    2e76:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			return TRUE;
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	8f a7       	std	Y+47, r24	; 0x2f
    2e7c:	05 c0       	rjmp	.+10     	; 0x2e88 <APP_checkPassword+0x3c2>
		}
	}while(Lives > 0);
    2e7e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2e80:	88 23       	and	r24, r24
    2e82:	09 f0       	breq	.+2      	; 0x2e86 <APP_checkPassword+0x3c0>
    2e84:	2e ce       	rjmp	.-932    	; 0x2ae2 <APP_checkPassword+0x1c>
	return FALSE;
    2e86:	1f a6       	std	Y+47, r1	; 0x2f
    2e88:	8f a5       	ldd	r24, Y+47	; 0x2f
}
    2e8a:	af 96       	adiw	r28, 0x2f	; 47
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	08 95       	ret

00002e9c <APP_door>:

void APP_door()
{
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
	if(APP_checkPassword() == TRUE)
    2ea4:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <APP_checkPassword>
    2ea8:	81 30       	cpi	r24, 0x01	; 1
    2eaa:	09 f0       	breq	.+2      	; 0x2eae <APP_door+0x12>
    2eac:	4a c0       	rjmp	.+148    	; 0x2f42 <APP_door+0xa6>
	{
		TIMER0_init(&TIMER0_Configuration);
    2eae:	8c e6       	ldi	r24, 0x6C	; 108
    2eb0:	91 e0       	ldi	r25, 0x01	; 1
    2eb2:	0e 94 d7 06 	call	0xdae	; 0xdae <TIMER0_init>
//		TIMER0_COMP_setCallBack(TIMER0_ISR);
		LCD_clearScreen();
    2eb6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
		LCD_displayString("Opening the Door");
    2eba:	89 e1       	ldi	r24, 0x19	; 25
    2ebc:	91 e0       	ldi	r25, 0x01	; 1
    2ebe:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_displayString>
		g_ticks0 = 0;
    2ec2:	10 92 8a 01 	sts	0x018A, r1
    2ec6:	10 92 89 01 	sts	0x0189, r1
		DoorMotor_Rotate(DcMotor_CW);
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DoorMotor_Rotate>
		while(g_ticks0 != TIMER0_TICKS_TO_SEC * OPEN_DOOR_TIME){}
    2ed0:	80 91 89 01 	lds	r24, 0x0189
    2ed4:	90 91 8a 01 	lds	r25, 0x018A
    2ed8:	80 38       	cpi	r24, 0x80	; 128
    2eda:	91 05       	cpc	r25, r1
    2edc:	c9 f7       	brne	.-14     	; 0x2ed0 <APP_door+0x34>

		LCD_clearScreen();
    2ede:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
		LCD_displayString("Door is Opened");
    2ee2:	8a e2       	ldi	r24, 0x2A	; 42
    2ee4:	91 e0       	ldi	r25, 0x01	; 1
    2ee6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_displayString>
		g_ticks0 = 0;
    2eea:	10 92 8a 01 	sts	0x018A, r1
    2eee:	10 92 89 01 	sts	0x0189, r1
		DoorMotor_Rotate(DcMotor_STOP);
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DoorMotor_Rotate>
		while(g_ticks0 != TIMER0_TICKS_TO_SEC*OPENED_DOOR){}
    2ef8:	80 91 89 01 	lds	r24, 0x0189
    2efc:	90 91 8a 01 	lds	r25, 0x018A
    2f00:	80 34       	cpi	r24, 0x40	; 64
    2f02:	91 05       	cpc	r25, r1
    2f04:	c9 f7       	brne	.-14     	; 0x2ef8 <APP_door+0x5c>
		LCD_clearScreen();
    2f06:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
		LCD_displayString("Closing the Door");
    2f0a:	89 e3       	ldi	r24, 0x39	; 57
    2f0c:	91 e0       	ldi	r25, 0x01	; 1
    2f0e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_displayString>
		g_ticks0 = 0;
    2f12:	10 92 8a 01 	sts	0x018A, r1
    2f16:	10 92 89 01 	sts	0x0189, r1
		DoorMotor_Rotate(DcMotor_CCW);
    2f1a:	82 e0       	ldi	r24, 0x02	; 2
    2f1c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DoorMotor_Rotate>
		while(g_ticks0 != TIMER0_TICKS_TO_SEC*CLOSE_DOOR_TIME){}
    2f20:	80 91 89 01 	lds	r24, 0x0189
    2f24:	90 91 8a 01 	lds	r25, 0x018A
    2f28:	80 38       	cpi	r24, 0x80	; 128
    2f2a:	91 05       	cpc	r25, r1
    2f2c:	c9 f7       	brne	.-14     	; 0x2f20 <APP_door+0x84>
		g_ticks0 = 0;
    2f2e:	10 92 8a 01 	sts	0x018A, r1
    2f32:	10 92 89 01 	sts	0x0189, r1
		DoorMotor_Rotate(DcMotor_STOP);
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DoorMotor_Rotate>
		TIMER0_deInit();
    2f3c:	0e 94 20 07 	call	0xe40	; 0xe40 <TIMER0_deInit>
    2f40:	02 c0       	rjmp	.+4      	; 0x2f46 <APP_door+0xaa>
	}
	else
	{
		APP_alarm();
    2f42:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <APP_alarm>
	}
}
    2f46:	cf 91       	pop	r28
    2f48:	df 91       	pop	r29
    2f4a:	08 95       	ret

00002f4c <APP_changePassword>:

void APP_changePassword()
{
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
	if(APP_checkPassword() == TRUE)
    2f54:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <APP_checkPassword>
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	19 f4       	brne	.+6      	; 0x2f62 <APP_changePassword+0x16>
	{
		APP_setPassword();
    2f5c:	0e 94 ad 12 	call	0x255a	; 0x255a <APP_setPassword>
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <APP_changePassword+0x1a>
	}
	else
	{
		APP_alarm();
    2f62:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <APP_alarm>
	}
}
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <APP_alarm>:

void APP_alarm()
{
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2f74:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 3, "ERROR !!!");
    2f78:	2a e4       	ldi	r18, 0x4A	; 74
    2f7a:	31 e0       	ldi	r19, 0x01	; 1
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	63 e0       	ldi	r22, 0x03	; 3
    2f80:	a9 01       	movw	r20, r18
    2f82:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Try Again Later");
    2f86:	24 e5       	ldi	r18, 0x54	; 84
    2f88:	31 e0       	ldi	r19, 0x01	; 1
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	60 e0       	ldi	r22, 0x00	; 0
    2f8e:	a9 01       	movw	r20, r18
    2f90:	0e 94 91 10 	call	0x2122	; 0x2122 <LCD_displayStringRowColumn>
	TIMER0_init(&TIMER0_Configuration);
    2f94:	8c e6       	ldi	r24, 0x6C	; 108
    2f96:	91 e0       	ldi	r25, 0x01	; 1
    2f98:	0e 94 d7 06 	call	0xdae	; 0xdae <TIMER0_init>
	g_ticks0 = 0;
    2f9c:	10 92 8a 01 	sts	0x018A, r1
    2fa0:	10 92 89 01 	sts	0x0189, r1
	BUZZER_on();
    2fa4:	0e 94 ad 11 	call	0x235a	; 0x235a <BUZZER_on>
	while(g_ticks0 != TIMER0_TICKS_TO_SEC*ALARM_TIME){}
    2fa8:	80 91 89 01 	lds	r24, 0x0189
    2fac:	90 91 8a 01 	lds	r25, 0x018A
    2fb0:	21 e0       	ldi	r18, 0x01	; 1
    2fb2:	80 34       	cpi	r24, 0x40	; 64
    2fb4:	92 07       	cpc	r25, r18
    2fb6:	c1 f7       	brne	.-16     	; 0x2fa8 <APP_alarm+0x3c>
	BUZZER_off();
    2fb8:	0e 94 b9 11 	call	0x2372	; 0x2372 <BUZZER_off>
}
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <__udivmodsi4>:
    2fc2:	a1 e2       	ldi	r26, 0x21	; 33
    2fc4:	1a 2e       	mov	r1, r26
    2fc6:	aa 1b       	sub	r26, r26
    2fc8:	bb 1b       	sub	r27, r27
    2fca:	fd 01       	movw	r30, r26
    2fcc:	0d c0       	rjmp	.+26     	; 0x2fe8 <__udivmodsi4_ep>

00002fce <__udivmodsi4_loop>:
    2fce:	aa 1f       	adc	r26, r26
    2fd0:	bb 1f       	adc	r27, r27
    2fd2:	ee 1f       	adc	r30, r30
    2fd4:	ff 1f       	adc	r31, r31
    2fd6:	a2 17       	cp	r26, r18
    2fd8:	b3 07       	cpc	r27, r19
    2fda:	e4 07       	cpc	r30, r20
    2fdc:	f5 07       	cpc	r31, r21
    2fde:	20 f0       	brcs	.+8      	; 0x2fe8 <__udivmodsi4_ep>
    2fe0:	a2 1b       	sub	r26, r18
    2fe2:	b3 0b       	sbc	r27, r19
    2fe4:	e4 0b       	sbc	r30, r20
    2fe6:	f5 0b       	sbc	r31, r21

00002fe8 <__udivmodsi4_ep>:
    2fe8:	66 1f       	adc	r22, r22
    2fea:	77 1f       	adc	r23, r23
    2fec:	88 1f       	adc	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	1a 94       	dec	r1
    2ff2:	69 f7       	brne	.-38     	; 0x2fce <__udivmodsi4_loop>
    2ff4:	60 95       	com	r22
    2ff6:	70 95       	com	r23
    2ff8:	80 95       	com	r24
    2ffa:	90 95       	com	r25
    2ffc:	9b 01       	movw	r18, r22
    2ffe:	ac 01       	movw	r20, r24
    3000:	bd 01       	movw	r22, r26
    3002:	cf 01       	movw	r24, r30
    3004:	08 95       	ret

00003006 <__prologue_saves__>:
    3006:	2f 92       	push	r2
    3008:	3f 92       	push	r3
    300a:	4f 92       	push	r4
    300c:	5f 92       	push	r5
    300e:	6f 92       	push	r6
    3010:	7f 92       	push	r7
    3012:	8f 92       	push	r8
    3014:	9f 92       	push	r9
    3016:	af 92       	push	r10
    3018:	bf 92       	push	r11
    301a:	cf 92       	push	r12
    301c:	df 92       	push	r13
    301e:	ef 92       	push	r14
    3020:	ff 92       	push	r15
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	ca 1b       	sub	r28, r26
    3030:	db 0b       	sbc	r29, r27
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	09 94       	ijmp

0000303e <__epilogue_restores__>:
    303e:	2a 88       	ldd	r2, Y+18	; 0x12
    3040:	39 88       	ldd	r3, Y+17	; 0x11
    3042:	48 88       	ldd	r4, Y+16	; 0x10
    3044:	5f 84       	ldd	r5, Y+15	; 0x0f
    3046:	6e 84       	ldd	r6, Y+14	; 0x0e
    3048:	7d 84       	ldd	r7, Y+13	; 0x0d
    304a:	8c 84       	ldd	r8, Y+12	; 0x0c
    304c:	9b 84       	ldd	r9, Y+11	; 0x0b
    304e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3050:	b9 84       	ldd	r11, Y+9	; 0x09
    3052:	c8 84       	ldd	r12, Y+8	; 0x08
    3054:	df 80       	ldd	r13, Y+7	; 0x07
    3056:	ee 80       	ldd	r14, Y+6	; 0x06
    3058:	fd 80       	ldd	r15, Y+5	; 0x05
    305a:	0c 81       	ldd	r16, Y+4	; 0x04
    305c:	1b 81       	ldd	r17, Y+3	; 0x03
    305e:	aa 81       	ldd	r26, Y+2	; 0x02
    3060:	b9 81       	ldd	r27, Y+1	; 0x01
    3062:	ce 0f       	add	r28, r30
    3064:	d1 1d       	adc	r29, r1
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	de bf       	out	0x3e, r29	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	ed 01       	movw	r28, r26
    3072:	08 95       	ret

00003074 <strcmp>:
    3074:	fb 01       	movw	r30, r22
    3076:	dc 01       	movw	r26, r24
    3078:	8d 91       	ld	r24, X+
    307a:	01 90       	ld	r0, Z+
    307c:	80 19       	sub	r24, r0
    307e:	01 10       	cpse	r0, r1
    3080:	d9 f3       	breq	.-10     	; 0x3078 <strcmp+0x4>
    3082:	99 0b       	sbc	r25, r25
    3084:	08 95       	ret

00003086 <itoa>:
    3086:	fb 01       	movw	r30, r22
    3088:	9f 01       	movw	r18, r30
    308a:	e8 94       	clt
    308c:	42 30       	cpi	r20, 0x02	; 2
    308e:	c4 f0       	brlt	.+48     	; 0x30c0 <itoa+0x3a>
    3090:	45 32       	cpi	r20, 0x25	; 37
    3092:	b4 f4       	brge	.+44     	; 0x30c0 <itoa+0x3a>
    3094:	4a 30       	cpi	r20, 0x0A	; 10
    3096:	29 f4       	brne	.+10     	; 0x30a2 <itoa+0x1c>
    3098:	97 fb       	bst	r25, 7
    309a:	1e f4       	brtc	.+6      	; 0x30a2 <itoa+0x1c>
    309c:	90 95       	com	r25
    309e:	81 95       	neg	r24
    30a0:	9f 4f       	sbci	r25, 0xFF	; 255
    30a2:	64 2f       	mov	r22, r20
    30a4:	77 27       	eor	r23, r23
    30a6:	0e 94 93 18 	call	0x3126	; 0x3126 <__udivmodhi4>
    30aa:	80 5d       	subi	r24, 0xD0	; 208
    30ac:	8a 33       	cpi	r24, 0x3A	; 58
    30ae:	0c f0       	brlt	.+2      	; 0x30b2 <itoa+0x2c>
    30b0:	89 5d       	subi	r24, 0xD9	; 217
    30b2:	81 93       	st	Z+, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	a1 f7       	brne	.-24     	; 0x30a2 <itoa+0x1c>
    30ba:	16 f4       	brtc	.+4      	; 0x30c0 <itoa+0x3a>
    30bc:	5d e2       	ldi	r21, 0x2D	; 45
    30be:	51 93       	st	Z+, r21
    30c0:	10 82       	st	Z, r1
    30c2:	c9 01       	movw	r24, r18
    30c4:	0c 94 83 18 	jmp	0x3106	; 0x3106 <strrev>

000030c8 <__eerd_byte_m32>:
    30c8:	e1 99       	sbic	0x1c, 1	; 28
    30ca:	fe cf       	rjmp	.-4      	; 0x30c8 <__eerd_byte_m32>
    30cc:	9f bb       	out	0x1f, r25	; 31
    30ce:	8e bb       	out	0x1e, r24	; 30
    30d0:	e0 9a       	sbi	0x1c, 0	; 28
    30d2:	99 27       	eor	r25, r25
    30d4:	8d b3       	in	r24, 0x1d	; 29
    30d6:	08 95       	ret

000030d8 <__eewr_block_m32>:
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	03 c0       	rjmp	.+6      	; 0x30e4 <__eewr_block_m32+0xc>
    30de:	2d 91       	ld	r18, X+
    30e0:	0e 94 77 18 	call	0x30ee	; 0x30ee <__eewr_r18_m32>
    30e4:	41 50       	subi	r20, 0x01	; 1
    30e6:	50 40       	sbci	r21, 0x00	; 0
    30e8:	d0 f7       	brcc	.-12     	; 0x30de <__eewr_block_m32+0x6>
    30ea:	08 95       	ret

000030ec <__eewr_byte_m32>:
    30ec:	26 2f       	mov	r18, r22

000030ee <__eewr_r18_m32>:
    30ee:	e1 99       	sbic	0x1c, 1	; 28
    30f0:	fe cf       	rjmp	.-4      	; 0x30ee <__eewr_r18_m32>
    30f2:	9f bb       	out	0x1f, r25	; 31
    30f4:	8e bb       	out	0x1e, r24	; 30
    30f6:	2d bb       	out	0x1d, r18	; 29
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	e2 9a       	sbi	0x1c, 2	; 28
    30fe:	e1 9a       	sbi	0x1c, 1	; 28
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	01 96       	adiw	r24, 0x01	; 1
    3104:	08 95       	ret

00003106 <strrev>:
    3106:	dc 01       	movw	r26, r24
    3108:	fc 01       	movw	r30, r24
    310a:	67 2f       	mov	r22, r23
    310c:	71 91       	ld	r23, Z+
    310e:	77 23       	and	r23, r23
    3110:	e1 f7       	brne	.-8      	; 0x310a <strrev+0x4>
    3112:	32 97       	sbiw	r30, 0x02	; 2
    3114:	04 c0       	rjmp	.+8      	; 0x311e <strrev+0x18>
    3116:	7c 91       	ld	r23, X
    3118:	6d 93       	st	X+, r22
    311a:	70 83       	st	Z, r23
    311c:	62 91       	ld	r22, -Z
    311e:	ae 17       	cp	r26, r30
    3120:	bf 07       	cpc	r27, r31
    3122:	c8 f3       	brcs	.-14     	; 0x3116 <strrev+0x10>
    3124:	08 95       	ret

00003126 <__udivmodhi4>:
    3126:	aa 1b       	sub	r26, r26
    3128:	bb 1b       	sub	r27, r27
    312a:	51 e1       	ldi	r21, 0x11	; 17
    312c:	07 c0       	rjmp	.+14     	; 0x313c <__udivmodhi4_ep>

0000312e <__udivmodhi4_loop>:
    312e:	aa 1f       	adc	r26, r26
    3130:	bb 1f       	adc	r27, r27
    3132:	a6 17       	cp	r26, r22
    3134:	b7 07       	cpc	r27, r23
    3136:	10 f0       	brcs	.+4      	; 0x313c <__udivmodhi4_ep>
    3138:	a6 1b       	sub	r26, r22
    313a:	b7 0b       	sbc	r27, r23

0000313c <__udivmodhi4_ep>:
    313c:	88 1f       	adc	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	5a 95       	dec	r21
    3142:	a9 f7       	brne	.-22     	; 0x312e <__udivmodhi4_loop>
    3144:	80 95       	com	r24
    3146:	90 95       	com	r25
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	08 95       	ret

0000314e <_exit>:
    314e:	f8 94       	cli

00003150 <__stop_program>:
    3150:	ff cf       	rjmp	.-2      	; 0x3150 <__stop_program>
